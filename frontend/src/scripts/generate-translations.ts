import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { execSync } from 'child_process';

// Get the directory name of the current module
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Path to your en.json file
const enJsonPath = path.resolve(__dirname, '../../public/locales/en.json');
// Path to the output translations.ts file
const translationsTsPath = path.resolve(__dirname, '../translations.ts');
// Path to the output i18n-schema.json file
const i18nSchemaPath = path.resolve(__dirname, '../i18n-schema.json');

// Read the en.json file
const enJson = JSON.parse(fs.readFileSync(enJsonPath, 'utf-8'));

// Function to convert JSON keys to TypeScript interface
function generateTypeScriptInterface(obj: Record<string, never>, indent: string = ''): string {
    let result = '{\n';

    for (const key in obj) {
        if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {
            // Nested object
            result += `${indent}  ${key}: ${generateTypeScriptInterface(obj[key], indent + '  ')},\n`;
        } else {
            // Primitive value
            result += `${indent}  ${key}: string;\n`;
        }
    }

    result += `${indent}}`;
    return result;
}

// Generate the TypeScript interface
const interfaceName = 'Translations';
const tsContent = `// This file is auto-generated by scripts/generate-translations.ts\n\nexport interface ${interfaceName} ${generateTypeScriptInterface(enJson)}\n`;

// Write the TypeScript file
fs.writeFileSync(translationsTsPath, tsContent, 'utf-8');
console.log(`Successfully generated ${translationsTsPath}`);

// Generate the JSON schema using typescript-json-schema
try {
    const command = `npx typescript-json-schema "${translationsTsPath}" Translations --out "${i18nSchemaPath}"`;
    console.log(`Running command: ${command}`);
    const output = execSync(command, { encoding: 'utf-8', stdio: 'pipe' });
    console.log(`Command output: ${output}`);
    console.log(`Successfully generated ${i18nSchemaPath}`);
} catch (error) {
    console.error('Failed to generate i18n-schema.json:');
    console.error(error.stdout?.toString()); // Log the command output
    console.error(error.stderr?.toString()); // Log the error output
}