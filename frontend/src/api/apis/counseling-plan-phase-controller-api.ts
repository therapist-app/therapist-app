/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AddExerciseToCounselingPlanPhaseDTO } from '../models';
// @ts-ignore
import type { CounselingPlanPhaseOutputDTO } from '../models';
// @ts-ignore
import type { CreateCounselingPlanExerciseAIGeneratedDTO } from '../models';
// @ts-ignore
import type { CreateCounselingPlanPhaseAIGeneratedDTO } from '../models';
// @ts-ignore
import type { CreateCounselingPlanPhaseDTO } from '../models';
// @ts-ignore
import type { CreateExerciseDTO } from '../models';
// @ts-ignore
import type { RemoveExerciseFromCounselingPlanPhaseDTO } from '../models';
// @ts-ignore
import type { UpdateCounselingPlanPhase } from '../models';
/**
 * CounselingPlanPhaseControllerApi - axios parameter creator
 * @export
 */
export const CounselingPlanPhaseControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AddExerciseToCounselingPlanPhaseDTO} addExerciseToCounselingPlanPhaseDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addExerciseToCounselingPlanPhase: async (addExerciseToCounselingPlanPhaseDTO: AddExerciseToCounselingPlanPhaseDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addExerciseToCounselingPlanPhaseDTO' is not null or undefined
            assertParamExists('addExerciseToCounselingPlanPhase', 'addExerciseToCounselingPlanPhaseDTO', addExerciseToCounselingPlanPhaseDTO)
            const localVarPath = `/counseling-plan-phases/add-exercise`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addExerciseToCounselingPlanPhaseDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateCounselingPlanExerciseAIGeneratedDTO} createCounselingPlanExerciseAIGeneratedDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCounselingPlanExerciseAIGenerated: async (createCounselingPlanExerciseAIGeneratedDTO: CreateCounselingPlanExerciseAIGeneratedDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCounselingPlanExerciseAIGeneratedDTO' is not null or undefined
            assertParamExists('createCounselingPlanExerciseAIGenerated', 'createCounselingPlanExerciseAIGeneratedDTO', createCounselingPlanExerciseAIGeneratedDTO)
            const localVarPath = `/counseling-plan-phases/ai-generated-exercise/{counselingPlanPhaseId}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCounselingPlanExerciseAIGeneratedDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateCounselingPlanPhaseDTO} createCounselingPlanPhaseDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCounselingPlanPhase: async (createCounselingPlanPhaseDTO: CreateCounselingPlanPhaseDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCounselingPlanPhaseDTO' is not null or undefined
            assertParamExists('createCounselingPlanPhase', 'createCounselingPlanPhaseDTO', createCounselingPlanPhaseDTO)
            const localVarPath = `/counseling-plan-phases/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCounselingPlanPhaseDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateCounselingPlanPhaseAIGeneratedDTO} createCounselingPlanPhaseAIGeneratedDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCounselingPlanPhaseAIGenerated: async (createCounselingPlanPhaseAIGeneratedDTO: CreateCounselingPlanPhaseAIGeneratedDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCounselingPlanPhaseAIGeneratedDTO' is not null or undefined
            assertParamExists('createCounselingPlanPhaseAIGenerated', 'createCounselingPlanPhaseAIGeneratedDTO', createCounselingPlanPhaseAIGeneratedDTO)
            const localVarPath = `/counseling-plan-phases/ai-generated-phase`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCounselingPlanPhaseAIGeneratedDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCounselingPlanPhase: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCounselingPlanPhase', 'id', id)
            const localVarPath = `/counseling-plan-phases/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCounselingPlanPhaseById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCounselingPlanPhaseById', 'id', id)
            const localVarPath = `/counseling-plan-phases/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RemoveExerciseFromCounselingPlanPhaseDTO} removeExerciseFromCounselingPlanPhaseDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeExerciseFromCounselingPlanPhase: async (removeExerciseFromCounselingPlanPhaseDTO: RemoveExerciseFromCounselingPlanPhaseDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'removeExerciseFromCounselingPlanPhaseDTO' is not null or undefined
            assertParamExists('removeExerciseFromCounselingPlanPhase', 'removeExerciseFromCounselingPlanPhaseDTO', removeExerciseFromCounselingPlanPhaseDTO)
            const localVarPath = `/counseling-plan-phases/remove-exercise`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(removeExerciseFromCounselingPlanPhaseDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateCounselingPlanPhase} updateCounselingPlanPhase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCounselingPlanPhase: async (updateCounselingPlanPhase: UpdateCounselingPlanPhase, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateCounselingPlanPhase' is not null or undefined
            assertParamExists('updateCounselingPlanPhase', 'updateCounselingPlanPhase', updateCounselingPlanPhase)
            const localVarPath = `/counseling-plan-phases/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCounselingPlanPhase, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CounselingPlanPhaseControllerApi - functional programming interface
 * @export
 */
export const CounselingPlanPhaseControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CounselingPlanPhaseControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AddExerciseToCounselingPlanPhaseDTO} addExerciseToCounselingPlanPhaseDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addExerciseToCounselingPlanPhase(addExerciseToCounselingPlanPhaseDTO: AddExerciseToCounselingPlanPhaseDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CounselingPlanPhaseOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addExerciseToCounselingPlanPhase(addExerciseToCounselingPlanPhaseDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselingPlanPhaseControllerApi.addExerciseToCounselingPlanPhase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateCounselingPlanExerciseAIGeneratedDTO} createCounselingPlanExerciseAIGeneratedDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCounselingPlanExerciseAIGenerated(createCounselingPlanExerciseAIGeneratedDTO: CreateCounselingPlanExerciseAIGeneratedDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateExerciseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCounselingPlanExerciseAIGenerated(createCounselingPlanExerciseAIGeneratedDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselingPlanPhaseControllerApi.createCounselingPlanExerciseAIGenerated']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateCounselingPlanPhaseDTO} createCounselingPlanPhaseDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCounselingPlanPhase(createCounselingPlanPhaseDTO: CreateCounselingPlanPhaseDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CounselingPlanPhaseOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCounselingPlanPhase(createCounselingPlanPhaseDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselingPlanPhaseControllerApi.createCounselingPlanPhase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateCounselingPlanPhaseAIGeneratedDTO} createCounselingPlanPhaseAIGeneratedDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCounselingPlanPhaseAIGenerated(createCounselingPlanPhaseAIGeneratedDTO: CreateCounselingPlanPhaseAIGeneratedDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCounselingPlanPhaseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCounselingPlanPhaseAIGenerated(createCounselingPlanPhaseAIGeneratedDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselingPlanPhaseControllerApi.createCounselingPlanPhaseAIGenerated']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCounselingPlanPhase(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCounselingPlanPhase(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselingPlanPhaseControllerApi.deleteCounselingPlanPhase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCounselingPlanPhaseById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CounselingPlanPhaseOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCounselingPlanPhaseById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselingPlanPhaseControllerApi.getCounselingPlanPhaseById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RemoveExerciseFromCounselingPlanPhaseDTO} removeExerciseFromCounselingPlanPhaseDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeExerciseFromCounselingPlanPhase(removeExerciseFromCounselingPlanPhaseDTO: RemoveExerciseFromCounselingPlanPhaseDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CounselingPlanPhaseOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeExerciseFromCounselingPlanPhase(removeExerciseFromCounselingPlanPhaseDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselingPlanPhaseControllerApi.removeExerciseFromCounselingPlanPhase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateCounselingPlanPhase} updateCounselingPlanPhase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCounselingPlanPhase(updateCounselingPlanPhase: UpdateCounselingPlanPhase, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CounselingPlanPhaseOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCounselingPlanPhase(updateCounselingPlanPhase, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselingPlanPhaseControllerApi.updateCounselingPlanPhase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CounselingPlanPhaseControllerApi - factory interface
 * @export
 */
export const CounselingPlanPhaseControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CounselingPlanPhaseControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {AddExerciseToCounselingPlanPhaseDTO} addExerciseToCounselingPlanPhaseDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addExerciseToCounselingPlanPhase(addExerciseToCounselingPlanPhaseDTO: AddExerciseToCounselingPlanPhaseDTO, options?: RawAxiosRequestConfig): AxiosPromise<CounselingPlanPhaseOutputDTO> {
            return localVarFp.addExerciseToCounselingPlanPhase(addExerciseToCounselingPlanPhaseDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateCounselingPlanExerciseAIGeneratedDTO} createCounselingPlanExerciseAIGeneratedDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCounselingPlanExerciseAIGenerated(createCounselingPlanExerciseAIGeneratedDTO: CreateCounselingPlanExerciseAIGeneratedDTO, options?: RawAxiosRequestConfig): AxiosPromise<CreateExerciseDTO> {
            return localVarFp.createCounselingPlanExerciseAIGenerated(createCounselingPlanExerciseAIGeneratedDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateCounselingPlanPhaseDTO} createCounselingPlanPhaseDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCounselingPlanPhase(createCounselingPlanPhaseDTO: CreateCounselingPlanPhaseDTO, options?: RawAxiosRequestConfig): AxiosPromise<CounselingPlanPhaseOutputDTO> {
            return localVarFp.createCounselingPlanPhase(createCounselingPlanPhaseDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateCounselingPlanPhaseAIGeneratedDTO} createCounselingPlanPhaseAIGeneratedDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCounselingPlanPhaseAIGenerated(createCounselingPlanPhaseAIGeneratedDTO: CreateCounselingPlanPhaseAIGeneratedDTO, options?: RawAxiosRequestConfig): AxiosPromise<CreateCounselingPlanPhaseDTO> {
            return localVarFp.createCounselingPlanPhaseAIGenerated(createCounselingPlanPhaseAIGeneratedDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCounselingPlanPhase(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCounselingPlanPhase(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCounselingPlanPhaseById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<CounselingPlanPhaseOutputDTO> {
            return localVarFp.getCounselingPlanPhaseById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RemoveExerciseFromCounselingPlanPhaseDTO} removeExerciseFromCounselingPlanPhaseDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeExerciseFromCounselingPlanPhase(removeExerciseFromCounselingPlanPhaseDTO: RemoveExerciseFromCounselingPlanPhaseDTO, options?: RawAxiosRequestConfig): AxiosPromise<CounselingPlanPhaseOutputDTO> {
            return localVarFp.removeExerciseFromCounselingPlanPhase(removeExerciseFromCounselingPlanPhaseDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateCounselingPlanPhase} updateCounselingPlanPhase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCounselingPlanPhase(updateCounselingPlanPhase: UpdateCounselingPlanPhase, options?: RawAxiosRequestConfig): AxiosPromise<CounselingPlanPhaseOutputDTO> {
            return localVarFp.updateCounselingPlanPhase(updateCounselingPlanPhase, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CounselingPlanPhaseControllerApi - interface
 * @export
 * @interface CounselingPlanPhaseControllerApi
 */
export interface CounselingPlanPhaseControllerApiInterface {
    /**
     * 
     * @param {AddExerciseToCounselingPlanPhaseDTO} addExerciseToCounselingPlanPhaseDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselingPlanPhaseControllerApiInterface
     */
    addExerciseToCounselingPlanPhase(addExerciseToCounselingPlanPhaseDTO: AddExerciseToCounselingPlanPhaseDTO, options?: RawAxiosRequestConfig): AxiosPromise<CounselingPlanPhaseOutputDTO>;

    /**
     * 
     * @param {CreateCounselingPlanExerciseAIGeneratedDTO} createCounselingPlanExerciseAIGeneratedDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselingPlanPhaseControllerApiInterface
     */
    createCounselingPlanExerciseAIGenerated(createCounselingPlanExerciseAIGeneratedDTO: CreateCounselingPlanExerciseAIGeneratedDTO, options?: RawAxiosRequestConfig): AxiosPromise<CreateExerciseDTO>;

    /**
     * 
     * @param {CreateCounselingPlanPhaseDTO} createCounselingPlanPhaseDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselingPlanPhaseControllerApiInterface
     */
    createCounselingPlanPhase(createCounselingPlanPhaseDTO: CreateCounselingPlanPhaseDTO, options?: RawAxiosRequestConfig): AxiosPromise<CounselingPlanPhaseOutputDTO>;

    /**
     * 
     * @param {CreateCounselingPlanPhaseAIGeneratedDTO} createCounselingPlanPhaseAIGeneratedDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselingPlanPhaseControllerApiInterface
     */
    createCounselingPlanPhaseAIGenerated(createCounselingPlanPhaseAIGeneratedDTO: CreateCounselingPlanPhaseAIGeneratedDTO, options?: RawAxiosRequestConfig): AxiosPromise<CreateCounselingPlanPhaseDTO>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselingPlanPhaseControllerApiInterface
     */
    deleteCounselingPlanPhase(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselingPlanPhaseControllerApiInterface
     */
    getCounselingPlanPhaseById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<CounselingPlanPhaseOutputDTO>;

    /**
     * 
     * @param {RemoveExerciseFromCounselingPlanPhaseDTO} removeExerciseFromCounselingPlanPhaseDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselingPlanPhaseControllerApiInterface
     */
    removeExerciseFromCounselingPlanPhase(removeExerciseFromCounselingPlanPhaseDTO: RemoveExerciseFromCounselingPlanPhaseDTO, options?: RawAxiosRequestConfig): AxiosPromise<CounselingPlanPhaseOutputDTO>;

    /**
     * 
     * @param {UpdateCounselingPlanPhase} updateCounselingPlanPhase 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselingPlanPhaseControllerApiInterface
     */
    updateCounselingPlanPhase(updateCounselingPlanPhase: UpdateCounselingPlanPhase, options?: RawAxiosRequestConfig): AxiosPromise<CounselingPlanPhaseOutputDTO>;

}

/**
 * CounselingPlanPhaseControllerApi - object-oriented interface
 * @export
 * @class CounselingPlanPhaseControllerApi
 * @extends {BaseAPI}
 */
export class CounselingPlanPhaseControllerApi extends BaseAPI implements CounselingPlanPhaseControllerApiInterface {
    /**
     * 
     * @param {AddExerciseToCounselingPlanPhaseDTO} addExerciseToCounselingPlanPhaseDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselingPlanPhaseControllerApi
     */
    public addExerciseToCounselingPlanPhase(addExerciseToCounselingPlanPhaseDTO: AddExerciseToCounselingPlanPhaseDTO, options?: RawAxiosRequestConfig) {
        return CounselingPlanPhaseControllerApiFp(this.configuration).addExerciseToCounselingPlanPhase(addExerciseToCounselingPlanPhaseDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateCounselingPlanExerciseAIGeneratedDTO} createCounselingPlanExerciseAIGeneratedDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselingPlanPhaseControllerApi
     */
    public createCounselingPlanExerciseAIGenerated(createCounselingPlanExerciseAIGeneratedDTO: CreateCounselingPlanExerciseAIGeneratedDTO, options?: RawAxiosRequestConfig) {
        return CounselingPlanPhaseControllerApiFp(this.configuration).createCounselingPlanExerciseAIGenerated(createCounselingPlanExerciseAIGeneratedDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateCounselingPlanPhaseDTO} createCounselingPlanPhaseDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselingPlanPhaseControllerApi
     */
    public createCounselingPlanPhase(createCounselingPlanPhaseDTO: CreateCounselingPlanPhaseDTO, options?: RawAxiosRequestConfig) {
        return CounselingPlanPhaseControllerApiFp(this.configuration).createCounselingPlanPhase(createCounselingPlanPhaseDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateCounselingPlanPhaseAIGeneratedDTO} createCounselingPlanPhaseAIGeneratedDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselingPlanPhaseControllerApi
     */
    public createCounselingPlanPhaseAIGenerated(createCounselingPlanPhaseAIGeneratedDTO: CreateCounselingPlanPhaseAIGeneratedDTO, options?: RawAxiosRequestConfig) {
        return CounselingPlanPhaseControllerApiFp(this.configuration).createCounselingPlanPhaseAIGenerated(createCounselingPlanPhaseAIGeneratedDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselingPlanPhaseControllerApi
     */
    public deleteCounselingPlanPhase(id: string, options?: RawAxiosRequestConfig) {
        return CounselingPlanPhaseControllerApiFp(this.configuration).deleteCounselingPlanPhase(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselingPlanPhaseControllerApi
     */
    public getCounselingPlanPhaseById(id: string, options?: RawAxiosRequestConfig) {
        return CounselingPlanPhaseControllerApiFp(this.configuration).getCounselingPlanPhaseById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RemoveExerciseFromCounselingPlanPhaseDTO} removeExerciseFromCounselingPlanPhaseDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselingPlanPhaseControllerApi
     */
    public removeExerciseFromCounselingPlanPhase(removeExerciseFromCounselingPlanPhaseDTO: RemoveExerciseFromCounselingPlanPhaseDTO, options?: RawAxiosRequestConfig) {
        return CounselingPlanPhaseControllerApiFp(this.configuration).removeExerciseFromCounselingPlanPhase(removeExerciseFromCounselingPlanPhaseDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateCounselingPlanPhase} updateCounselingPlanPhase 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselingPlanPhaseControllerApi
     */
    public updateCounselingPlanPhase(updateCounselingPlanPhase: UpdateCounselingPlanPhase, options?: RawAxiosRequestConfig) {
        return CounselingPlanPhaseControllerApiFp(this.configuration).updateCounselingPlanPhase(updateCounselingPlanPhase, options).then((request) => request(this.axios, this.basePath));
    }
}

