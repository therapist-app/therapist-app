/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ChatbotTemplateDocumentOutputDTO } from '../models';
/**
 * ChatbotTemplateDocumentControllerApi - axios parameter creator
 * @export
 */
export const ChatbotTemplateDocumentControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} templateId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChatbotTemplateDocument: async (templateId: string, file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('createChatbotTemplateDocument', 'templateId', templateId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('createChatbotTemplateDocument', 'file', file)
            const localVarPath = `/chatbot-template-documents/{templateId}`
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} templateDocumentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChatbotTemplateDocument: async (templateDocumentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateDocumentId' is not null or undefined
            assertParamExists('deleteChatbotTemplateDocument', 'templateDocumentId', templateDocumentId)
            const localVarPath = `/chatbot-template-documents/{templateDocumentId}`
                .replace(`{${"templateDocumentId"}}`, encodeURIComponent(String(templateDocumentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} templateDocumentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadChatbotTemplateDocument: async (templateDocumentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateDocumentId' is not null or undefined
            assertParamExists('downloadChatbotTemplateDocument', 'templateDocumentId', templateDocumentId)
            const localVarPath = `/chatbot-template-documents/{templateDocumentId}/download`
                .replace(`{${"templateDocumentId"}}`, encodeURIComponent(String(templateDocumentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentsOfTemplate: async (templateId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('getDocumentsOfTemplate', 'templateId', templateId)
            const localVarPath = `/chatbot-template-documents/{templateId}`
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChatbotTemplateDocumentControllerApi - functional programming interface
 * @export
 */
export const ChatbotTemplateDocumentControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChatbotTemplateDocumentControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} templateId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createChatbotTemplateDocument(templateId: string, file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createChatbotTemplateDocument(templateId, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatbotTemplateDocumentControllerApi.createChatbotTemplateDocument']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} templateDocumentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteChatbotTemplateDocument(templateDocumentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteChatbotTemplateDocument(templateDocumentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatbotTemplateDocumentControllerApi.deleteChatbotTemplateDocument']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} templateDocumentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadChatbotTemplateDocument(templateDocumentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadChatbotTemplateDocument(templateDocumentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatbotTemplateDocumentControllerApi.downloadChatbotTemplateDocument']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocumentsOfTemplate(templateId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ChatbotTemplateDocumentOutputDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocumentsOfTemplate(templateId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatbotTemplateDocumentControllerApi.getDocumentsOfTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ChatbotTemplateDocumentControllerApi - factory interface
 * @export
 */
export const ChatbotTemplateDocumentControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChatbotTemplateDocumentControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} templateId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChatbotTemplateDocument(templateId: string, file: File, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createChatbotTemplateDocument(templateId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} templateDocumentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChatbotTemplateDocument(templateDocumentId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteChatbotTemplateDocument(templateDocumentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} templateDocumentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadChatbotTemplateDocument(templateDocumentId: string, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.downloadChatbotTemplateDocument(templateDocumentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentsOfTemplate(templateId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ChatbotTemplateDocumentOutputDTO>> {
            return localVarFp.getDocumentsOfTemplate(templateId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChatbotTemplateDocumentControllerApi - interface
 * @export
 * @interface ChatbotTemplateDocumentControllerApi
 */
export interface ChatbotTemplateDocumentControllerApiInterface {
    /**
     * 
     * @param {string} templateId 
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotTemplateDocumentControllerApiInterface
     */
    createChatbotTemplateDocument(templateId: string, file: File, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} templateDocumentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotTemplateDocumentControllerApiInterface
     */
    deleteChatbotTemplateDocument(templateDocumentId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} templateDocumentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotTemplateDocumentControllerApiInterface
     */
    downloadChatbotTemplateDocument(templateDocumentId: string, options?: RawAxiosRequestConfig): AxiosPromise<File>;

    /**
     * 
     * @param {string} templateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotTemplateDocumentControllerApiInterface
     */
    getDocumentsOfTemplate(templateId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ChatbotTemplateDocumentOutputDTO>>;

}

/**
 * ChatbotTemplateDocumentControllerApi - object-oriented interface
 * @export
 * @class ChatbotTemplateDocumentControllerApi
 * @extends {BaseAPI}
 */
export class ChatbotTemplateDocumentControllerApi extends BaseAPI implements ChatbotTemplateDocumentControllerApiInterface {
    /**
     * 
     * @param {string} templateId 
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotTemplateDocumentControllerApi
     */
    public createChatbotTemplateDocument(templateId: string, file: File, options?: RawAxiosRequestConfig) {
        return ChatbotTemplateDocumentControllerApiFp(this.configuration).createChatbotTemplateDocument(templateId, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} templateDocumentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotTemplateDocumentControllerApi
     */
    public deleteChatbotTemplateDocument(templateDocumentId: string, options?: RawAxiosRequestConfig) {
        return ChatbotTemplateDocumentControllerApiFp(this.configuration).deleteChatbotTemplateDocument(templateDocumentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} templateDocumentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotTemplateDocumentControllerApi
     */
    public downloadChatbotTemplateDocument(templateDocumentId: string, options?: RawAxiosRequestConfig) {
        return ChatbotTemplateDocumentControllerApiFp(this.configuration).downloadChatbotTemplateDocument(templateDocumentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} templateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotTemplateDocumentControllerApi
     */
    public getDocumentsOfTemplate(templateId: string, options?: RawAxiosRequestConfig) {
        return ChatbotTemplateDocumentControllerApiFp(this.configuration).getDocumentsOfTemplate(templateId, options).then((request) => request(this.axios, this.basePath));
    }
}

