/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateMeetingNoteDTO } from '../models';
// @ts-ignore
import type { MeetingNoteOutputDTO } from '../models';
// @ts-ignore
import type { UpdateMeetingNoteDTO } from '../models';
/**
 * MeetingNoteControllerApi - axios parameter creator
 * @export
 */
export const MeetingNoteControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateMeetingNoteDTO} createMeetingNoteDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMeetingNote: async (createMeetingNoteDTO: CreateMeetingNoteDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createMeetingNoteDTO' is not null or undefined
            assertParamExists('createMeetingNote', 'createMeetingNoteDTO', createMeetingNoteDTO)
            const localVarPath = `/meeting-notes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMeetingNoteDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} meetingNoteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMeetingNoteById: async (meetingNoteId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingNoteId' is not null or undefined
            assertParamExists('deleteMeetingNoteById', 'meetingNoteId', meetingNoteId)
            const localVarPath = `/meeting-notes/{meetingNoteId}`
                .replace(`{${"meetingNoteId"}}`, encodeURIComponent(String(meetingNoteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} meetingNoteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingNoteById: async (meetingNoteId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingNoteId' is not null or undefined
            assertParamExists('getMeetingNoteById', 'meetingNoteId', meetingNoteId)
            const localVarPath = `/meeting-notes/{meetingNoteId}`
                .replace(`{${"meetingNoteId"}}`, encodeURIComponent(String(meetingNoteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateMeetingNoteDTO} updateMeetingNoteDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMeetingNote: async (updateMeetingNoteDTO: UpdateMeetingNoteDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateMeetingNoteDTO' is not null or undefined
            assertParamExists('updateMeetingNote', 'updateMeetingNoteDTO', updateMeetingNoteDTO)
            const localVarPath = `/meeting-notes/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMeetingNoteDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MeetingNoteControllerApi - functional programming interface
 * @export
 */
export const MeetingNoteControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MeetingNoteControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateMeetingNoteDTO} createMeetingNoteDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMeetingNote(createMeetingNoteDTO: CreateMeetingNoteDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingNoteOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMeetingNote(createMeetingNoteDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MeetingNoteControllerApi.createMeetingNote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} meetingNoteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMeetingNoteById(meetingNoteId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMeetingNoteById(meetingNoteId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MeetingNoteControllerApi.deleteMeetingNoteById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} meetingNoteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeetingNoteById(meetingNoteId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingNoteOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeetingNoteById(meetingNoteId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MeetingNoteControllerApi.getMeetingNoteById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateMeetingNoteDTO} updateMeetingNoteDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMeetingNote(updateMeetingNoteDTO: UpdateMeetingNoteDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingNoteOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMeetingNote(updateMeetingNoteDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MeetingNoteControllerApi.updateMeetingNote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MeetingNoteControllerApi - factory interface
 * @export
 */
export const MeetingNoteControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MeetingNoteControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateMeetingNoteDTO} createMeetingNoteDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMeetingNote(createMeetingNoteDTO: CreateMeetingNoteDTO, options?: RawAxiosRequestConfig): AxiosPromise<MeetingNoteOutputDTO> {
            return localVarFp.createMeetingNote(createMeetingNoteDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} meetingNoteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMeetingNoteById(meetingNoteId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteMeetingNoteById(meetingNoteId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} meetingNoteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingNoteById(meetingNoteId: string, options?: RawAxiosRequestConfig): AxiosPromise<MeetingNoteOutputDTO> {
            return localVarFp.getMeetingNoteById(meetingNoteId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateMeetingNoteDTO} updateMeetingNoteDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMeetingNote(updateMeetingNoteDTO: UpdateMeetingNoteDTO, options?: RawAxiosRequestConfig): AxiosPromise<MeetingNoteOutputDTO> {
            return localVarFp.updateMeetingNote(updateMeetingNoteDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MeetingNoteControllerApi - interface
 * @export
 * @interface MeetingNoteControllerApi
 */
export interface MeetingNoteControllerApiInterface {
    /**
     * 
     * @param {CreateMeetingNoteDTO} createMeetingNoteDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingNoteControllerApiInterface
     */
    createMeetingNote(createMeetingNoteDTO: CreateMeetingNoteDTO, options?: RawAxiosRequestConfig): AxiosPromise<MeetingNoteOutputDTO>;

    /**
     * 
     * @param {string} meetingNoteId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingNoteControllerApiInterface
     */
    deleteMeetingNoteById(meetingNoteId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} meetingNoteId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingNoteControllerApiInterface
     */
    getMeetingNoteById(meetingNoteId: string, options?: RawAxiosRequestConfig): AxiosPromise<MeetingNoteOutputDTO>;

    /**
     * 
     * @param {UpdateMeetingNoteDTO} updateMeetingNoteDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingNoteControllerApiInterface
     */
    updateMeetingNote(updateMeetingNoteDTO: UpdateMeetingNoteDTO, options?: RawAxiosRequestConfig): AxiosPromise<MeetingNoteOutputDTO>;

}

/**
 * MeetingNoteControllerApi - object-oriented interface
 * @export
 * @class MeetingNoteControllerApi
 * @extends {BaseAPI}
 */
export class MeetingNoteControllerApi extends BaseAPI implements MeetingNoteControllerApiInterface {
    /**
     * 
     * @param {CreateMeetingNoteDTO} createMeetingNoteDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingNoteControllerApi
     */
    public createMeetingNote(createMeetingNoteDTO: CreateMeetingNoteDTO, options?: RawAxiosRequestConfig) {
        return MeetingNoteControllerApiFp(this.configuration).createMeetingNote(createMeetingNoteDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} meetingNoteId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingNoteControllerApi
     */
    public deleteMeetingNoteById(meetingNoteId: string, options?: RawAxiosRequestConfig) {
        return MeetingNoteControllerApiFp(this.configuration).deleteMeetingNoteById(meetingNoteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} meetingNoteId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingNoteControllerApi
     */
    public getMeetingNoteById(meetingNoteId: string, options?: RawAxiosRequestConfig) {
        return MeetingNoteControllerApiFp(this.configuration).getMeetingNoteById(meetingNoteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateMeetingNoteDTO} updateMeetingNoteDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingNoteControllerApi
     */
    public updateMeetingNote(updateMeetingNoteDTO: UpdateMeetingNoteDTO, options?: RawAxiosRequestConfig) {
        return MeetingNoteControllerApiFp(this.configuration).updateMeetingNote(updateMeetingNoteDTO, options).then((request) => request(this.axios, this.basePath));
    }
}

