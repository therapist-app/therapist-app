/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { TherapistDocumentOutputDTO } from '../models';
/**
 * TherapistDocumentControllerApi - axios parameter creator
 * @export
 */
export const TherapistDocumentControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} therapistId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTherapistDocument: async (therapistId: string, file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'therapistId' is not null or undefined
            assertParamExists('createTherapistDocument', 'therapistId', therapistId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('createTherapistDocument', 'file', file)
            const localVarPath = `/therapist-documents/{therapistId}`
                .replace(`{${"therapistId"}}`, encodeURIComponent(String(therapistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} therapistDocumentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTherapistDocument: async (therapistDocumentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'therapistDocumentId' is not null or undefined
            assertParamExists('deleteTherapistDocument', 'therapistDocumentId', therapistDocumentId)
            const localVarPath = `/therapist-documents/{therapistDocumentId}`
                .replace(`{${"therapistDocumentId"}}`, encodeURIComponent(String(therapistDocumentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} therapistDocumentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadTherapistDocument: async (therapistDocumentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'therapistDocumentId' is not null or undefined
            assertParamExists('downloadTherapistDocument', 'therapistDocumentId', therapistDocumentId)
            const localVarPath = `/therapist-documents/{therapistDocumentId}/download`
                .replace(`{${"therapistDocumentId"}}`, encodeURIComponent(String(therapistDocumentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} therapistId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentsOfTherapist: async (therapistId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'therapistId' is not null or undefined
            assertParamExists('getDocumentsOfTherapist', 'therapistId', therapistId)
            const localVarPath = `/therapist-documents/{therapistId}`
                .replace(`{${"therapistId"}}`, encodeURIComponent(String(therapistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TherapistDocumentControllerApi - functional programming interface
 * @export
 */
export const TherapistDocumentControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TherapistDocumentControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} therapistId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTherapistDocument(therapistId: string, file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTherapistDocument(therapistId, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TherapistDocumentControllerApi.createTherapistDocument']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} therapistDocumentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTherapistDocument(therapistDocumentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTherapistDocument(therapistDocumentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TherapistDocumentControllerApi.deleteTherapistDocument']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} therapistDocumentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadTherapistDocument(therapistDocumentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadTherapistDocument(therapistDocumentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TherapistDocumentControllerApi.downloadTherapistDocument']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} therapistId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocumentsOfTherapist(therapistId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TherapistDocumentOutputDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocumentsOfTherapist(therapistId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TherapistDocumentControllerApi.getDocumentsOfTherapist']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TherapistDocumentControllerApi - factory interface
 * @export
 */
export const TherapistDocumentControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TherapistDocumentControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} therapistId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTherapistDocument(therapistId: string, file: File, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createTherapistDocument(therapistId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} therapistDocumentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTherapistDocument(therapistDocumentId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTherapistDocument(therapistDocumentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} therapistDocumentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadTherapistDocument(therapistDocumentId: string, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.downloadTherapistDocument(therapistDocumentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} therapistId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentsOfTherapist(therapistId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<TherapistDocumentOutputDTO>> {
            return localVarFp.getDocumentsOfTherapist(therapistId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TherapistDocumentControllerApi - interface
 * @export
 * @interface TherapistDocumentControllerApi
 */
export interface TherapistDocumentControllerApiInterface {
    /**
     * 
     * @param {string} therapistId 
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapistDocumentControllerApiInterface
     */
    createTherapistDocument(therapistId: string, file: File, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} therapistDocumentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapistDocumentControllerApiInterface
     */
    deleteTherapistDocument(therapistDocumentId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} therapistDocumentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapistDocumentControllerApiInterface
     */
    downloadTherapistDocument(therapistDocumentId: string, options?: RawAxiosRequestConfig): AxiosPromise<File>;

    /**
     * 
     * @param {string} therapistId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapistDocumentControllerApiInterface
     */
    getDocumentsOfTherapist(therapistId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<TherapistDocumentOutputDTO>>;

}

/**
 * TherapistDocumentControllerApi - object-oriented interface
 * @export
 * @class TherapistDocumentControllerApi
 * @extends {BaseAPI}
 */
export class TherapistDocumentControllerApi extends BaseAPI implements TherapistDocumentControllerApiInterface {
    /**
     * 
     * @param {string} therapistId 
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapistDocumentControllerApi
     */
    public createTherapistDocument(therapistId: string, file: File, options?: RawAxiosRequestConfig) {
        return TherapistDocumentControllerApiFp(this.configuration).createTherapistDocument(therapistId, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} therapistDocumentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapistDocumentControllerApi
     */
    public deleteTherapistDocument(therapistDocumentId: string, options?: RawAxiosRequestConfig) {
        return TherapistDocumentControllerApiFp(this.configuration).deleteTherapistDocument(therapistDocumentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} therapistDocumentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapistDocumentControllerApi
     */
    public downloadTherapistDocument(therapistDocumentId: string, options?: RawAxiosRequestConfig) {
        return TherapistDocumentControllerApiFp(this.configuration).downloadTherapistDocument(therapistDocumentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} therapistId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapistDocumentControllerApi
     */
    public getDocumentsOfTherapist(therapistId: string, options?: RawAxiosRequestConfig) {
        return TherapistDocumentControllerApiFp(this.configuration).getDocumentsOfTherapist(therapistId, options).then((request) => request(this.axios, this.basePath));
    }
}

