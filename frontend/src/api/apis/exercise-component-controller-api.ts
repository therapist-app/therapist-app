/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateExerciseComponentDTO } from '../models';
// @ts-ignore
import type { UpdateExerciseComponentDTO } from '../models';
/**
 * ExerciseComponentControllerApi - axios parameter creator
 * @export
 */
export const ExerciseComponentControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateExerciseComponentDTO} createExerciseComponentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExerciseComponent: async (createExerciseComponentDTO: CreateExerciseComponentDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createExerciseComponentDTO' is not null or undefined
            assertParamExists('createExerciseComponent', 'createExerciseComponentDTO', createExerciseComponentDTO)
            const localVarPath = `/exercise-components/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createExerciseComponentDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateExerciseComponentDTO} metadata 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExerciseComponentWithFile: async (metadata: CreateExerciseComponentDTO, file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'metadata' is not null or undefined
            assertParamExists('createExerciseComponentWithFile', 'metadata', metadata)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('createExerciseComponentWithFile', 'file', file)
            const localVarPath = `/exercise-components/with-file`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (metadata !== undefined) { 
                localVarFormParams.append('metadata', new Blob([JSON.stringify(metadata)], { type: "application/json", }));
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} exerciseComponentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExerciseComponent: async (exerciseComponentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'exerciseComponentId' is not null or undefined
            assertParamExists('deleteExerciseComponent', 'exerciseComponentId', exerciseComponentId)
            const localVarPath = `/exercise-components/{exerciseComponentId}`
                .replace(`{${"exerciseComponentId"}}`, encodeURIComponent(String(exerciseComponentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} exerciseComponentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadExerciseComponentFile: async (exerciseComponentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'exerciseComponentId' is not null or undefined
            assertParamExists('downloadExerciseComponentFile', 'exerciseComponentId', exerciseComponentId)
            const localVarPath = `/exercise-components/{exerciseComponentId}/download`
                .replace(`{${"exerciseComponentId"}}`, encodeURIComponent(String(exerciseComponentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateExerciseComponentDTO} updateExerciseComponentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExerciseComponent: async (updateExerciseComponentDTO: UpdateExerciseComponentDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateExerciseComponentDTO' is not null or undefined
            assertParamExists('updateExerciseComponent', 'updateExerciseComponentDTO', updateExerciseComponentDTO)
            const localVarPath = `/exercise-components/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateExerciseComponentDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExerciseComponentControllerApi - functional programming interface
 * @export
 */
export const ExerciseComponentControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExerciseComponentControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateExerciseComponentDTO} createExerciseComponentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createExerciseComponent(createExerciseComponentDTO: CreateExerciseComponentDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createExerciseComponent(createExerciseComponentDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExerciseComponentControllerApi.createExerciseComponent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateExerciseComponentDTO} metadata 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createExerciseComponentWithFile(metadata: CreateExerciseComponentDTO, file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createExerciseComponentWithFile(metadata, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExerciseComponentControllerApi.createExerciseComponentWithFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} exerciseComponentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExerciseComponent(exerciseComponentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteExerciseComponent(exerciseComponentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExerciseComponentControllerApi.deleteExerciseComponent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} exerciseComponentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadExerciseComponentFile(exerciseComponentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadExerciseComponentFile(exerciseComponentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExerciseComponentControllerApi.downloadExerciseComponentFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateExerciseComponentDTO} updateExerciseComponentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateExerciseComponent(updateExerciseComponentDTO: UpdateExerciseComponentDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateExerciseComponent(updateExerciseComponentDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExerciseComponentControllerApi.updateExerciseComponent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ExerciseComponentControllerApi - factory interface
 * @export
 */
export const ExerciseComponentControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExerciseComponentControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateExerciseComponentDTO} createExerciseComponentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExerciseComponent(createExerciseComponentDTO: CreateExerciseComponentDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createExerciseComponent(createExerciseComponentDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateExerciseComponentDTO} metadata 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExerciseComponentWithFile(metadata: CreateExerciseComponentDTO, file: File, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createExerciseComponentWithFile(metadata, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} exerciseComponentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExerciseComponent(exerciseComponentId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteExerciseComponent(exerciseComponentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} exerciseComponentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadExerciseComponentFile(exerciseComponentId: string, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.downloadExerciseComponentFile(exerciseComponentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateExerciseComponentDTO} updateExerciseComponentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExerciseComponent(updateExerciseComponentDTO: UpdateExerciseComponentDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateExerciseComponent(updateExerciseComponentDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExerciseComponentControllerApi - interface
 * @export
 * @interface ExerciseComponentControllerApi
 */
export interface ExerciseComponentControllerApiInterface {
    /**
     * 
     * @param {CreateExerciseComponentDTO} createExerciseComponentDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseComponentControllerApiInterface
     */
    createExerciseComponent(createExerciseComponentDTO: CreateExerciseComponentDTO, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {CreateExerciseComponentDTO} metadata 
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseComponentControllerApiInterface
     */
    createExerciseComponentWithFile(metadata: CreateExerciseComponentDTO, file: File, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} exerciseComponentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseComponentControllerApiInterface
     */
    deleteExerciseComponent(exerciseComponentId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} exerciseComponentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseComponentControllerApiInterface
     */
    downloadExerciseComponentFile(exerciseComponentId: string, options?: RawAxiosRequestConfig): AxiosPromise<File>;

    /**
     * 
     * @param {UpdateExerciseComponentDTO} updateExerciseComponentDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseComponentControllerApiInterface
     */
    updateExerciseComponent(updateExerciseComponentDTO: UpdateExerciseComponentDTO, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * ExerciseComponentControllerApi - object-oriented interface
 * @export
 * @class ExerciseComponentControllerApi
 * @extends {BaseAPI}
 */
export class ExerciseComponentControllerApi extends BaseAPI implements ExerciseComponentControllerApiInterface {
    /**
     * 
     * @param {CreateExerciseComponentDTO} createExerciseComponentDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseComponentControllerApi
     */
    public createExerciseComponent(createExerciseComponentDTO: CreateExerciseComponentDTO, options?: RawAxiosRequestConfig) {
        return ExerciseComponentControllerApiFp(this.configuration).createExerciseComponent(createExerciseComponentDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateExerciseComponentDTO} metadata 
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseComponentControllerApi
     */
    public createExerciseComponentWithFile(metadata: CreateExerciseComponentDTO, file: File, options?: RawAxiosRequestConfig) {
        return ExerciseComponentControllerApiFp(this.configuration).createExerciseComponentWithFile(metadata, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} exerciseComponentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseComponentControllerApi
     */
    public deleteExerciseComponent(exerciseComponentId: string, options?: RawAxiosRequestConfig) {
        return ExerciseComponentControllerApiFp(this.configuration).deleteExerciseComponent(exerciseComponentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} exerciseComponentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseComponentControllerApi
     */
    public downloadExerciseComponentFile(exerciseComponentId: string, options?: RawAxiosRequestConfig) {
        return ExerciseComponentControllerApiFp(this.configuration).downloadExerciseComponentFile(exerciseComponentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateExerciseComponentDTO} updateExerciseComponentDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseComponentControllerApi
     */
    public updateExerciseComponent(updateExerciseComponentDTO: UpdateExerciseComponentDTO, options?: RawAxiosRequestConfig) {
        return ExerciseComponentControllerApiFp(this.configuration).updateExerciseComponent(updateExerciseComponentDTO, options).then((request) => request(this.axios, this.basePath));
    }
}

