/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreatePatientDocumentFromTherapistDocumentDTO } from '../models';
// @ts-ignore
import type { PatientDocumentOutputDTO } from '../models';
/**
 * PatientDocumentControllerApi - axios parameter creator
 * @export
 */
export const PatientDocumentControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} patientId 
         * @param {boolean} isSharedWithPatient 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPatientDocument: async (patientId: string, isSharedWithPatient: boolean, file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientId' is not null or undefined
            assertParamExists('createPatientDocument', 'patientId', patientId)
            // verify required parameter 'isSharedWithPatient' is not null or undefined
            assertParamExists('createPatientDocument', 'isSharedWithPatient', isSharedWithPatient)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('createPatientDocument', 'file', file)
            const localVarPath = `/patient-documents/{patientId}`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (isSharedWithPatient !== undefined) {
                localVarQueryParameter['isSharedWithPatient'] = isSharedWithPatient;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreatePatientDocumentFromTherapistDocumentDTO} createPatientDocumentFromTherapistDocumentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPatientDocumentFromTherapistDocument: async (createPatientDocumentFromTherapistDocumentDTO: CreatePatientDocumentFromTherapistDocumentDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPatientDocumentFromTherapistDocumentDTO' is not null or undefined
            assertParamExists('createPatientDocumentFromTherapistDocument', 'createPatientDocumentFromTherapistDocumentDTO', createPatientDocumentFromTherapistDocumentDTO)
            const localVarPath = `/patient-documents/from-therapist-document`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPatientDocumentFromTherapistDocumentDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} patientDocumentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePatientDocument: async (patientDocumentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientDocumentId' is not null or undefined
            assertParamExists('deletePatientDocument', 'patientDocumentId', patientDocumentId)
            const localVarPath = `/patient-documents/{patientDocumentId}`
                .replace(`{${"patientDocumentId"}}`, encodeURIComponent(String(patientDocumentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} patientDocumentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadPatientDocument: async (patientDocumentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientDocumentId' is not null or undefined
            assertParamExists('downloadPatientDocument', 'patientDocumentId', patientDocumentId)
            const localVarPath = `/patient-documents/{patientDocumentId}/download`
                .replace(`{${"patientDocumentId"}}`, encodeURIComponent(String(patientDocumentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentsOfPatient: async (patientId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientId' is not null or undefined
            assertParamExists('getDocumentsOfPatient', 'patientId', patientId)
            const localVarPath = `/patient-documents/{patientId}`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PatientDocumentControllerApi - functional programming interface
 * @export
 */
export const PatientDocumentControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PatientDocumentControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} patientId 
         * @param {boolean} isSharedWithPatient 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPatientDocument(patientId: string, isSharedWithPatient: boolean, file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPatientDocument(patientId, isSharedWithPatient, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientDocumentControllerApi.createPatientDocument']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreatePatientDocumentFromTherapistDocumentDTO} createPatientDocumentFromTherapistDocumentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPatientDocumentFromTherapistDocument(createPatientDocumentFromTherapistDocumentDTO: CreatePatientDocumentFromTherapistDocumentDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPatientDocumentFromTherapistDocument(createPatientDocumentFromTherapistDocumentDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientDocumentControllerApi.createPatientDocumentFromTherapistDocument']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} patientDocumentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePatientDocument(patientDocumentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePatientDocument(patientDocumentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientDocumentControllerApi.deletePatientDocument']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} patientDocumentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadPatientDocument(patientDocumentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadPatientDocument(patientDocumentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientDocumentControllerApi.downloadPatientDocument']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocumentsOfPatient(patientId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PatientDocumentOutputDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocumentsOfPatient(patientId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientDocumentControllerApi.getDocumentsOfPatient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PatientDocumentControllerApi - factory interface
 * @export
 */
export const PatientDocumentControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PatientDocumentControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} patientId 
         * @param {boolean} isSharedWithPatient 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPatientDocument(patientId: string, isSharedWithPatient: boolean, file: File, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createPatientDocument(patientId, isSharedWithPatient, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreatePatientDocumentFromTherapistDocumentDTO} createPatientDocumentFromTherapistDocumentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPatientDocumentFromTherapistDocument(createPatientDocumentFromTherapistDocumentDTO: CreatePatientDocumentFromTherapistDocumentDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createPatientDocumentFromTherapistDocument(createPatientDocumentFromTherapistDocumentDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} patientDocumentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePatientDocument(patientDocumentId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePatientDocument(patientDocumentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} patientDocumentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadPatientDocument(patientDocumentId: string, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.downloadPatientDocument(patientDocumentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentsOfPatient(patientId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<PatientDocumentOutputDTO>> {
            return localVarFp.getDocumentsOfPatient(patientId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PatientDocumentControllerApi - interface
 * @export
 * @interface PatientDocumentControllerApi
 */
export interface PatientDocumentControllerApiInterface {
    /**
     * 
     * @param {string} patientId 
     * @param {boolean} isSharedWithPatient 
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientDocumentControllerApiInterface
     */
    createPatientDocument(patientId: string, isSharedWithPatient: boolean, file: File, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {CreatePatientDocumentFromTherapistDocumentDTO} createPatientDocumentFromTherapistDocumentDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientDocumentControllerApiInterface
     */
    createPatientDocumentFromTherapistDocument(createPatientDocumentFromTherapistDocumentDTO: CreatePatientDocumentFromTherapistDocumentDTO, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} patientDocumentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientDocumentControllerApiInterface
     */
    deletePatientDocument(patientDocumentId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} patientDocumentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientDocumentControllerApiInterface
     */
    downloadPatientDocument(patientDocumentId: string, options?: RawAxiosRequestConfig): AxiosPromise<File>;

    /**
     * 
     * @param {string} patientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientDocumentControllerApiInterface
     */
    getDocumentsOfPatient(patientId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<PatientDocumentOutputDTO>>;

}

/**
 * PatientDocumentControllerApi - object-oriented interface
 * @export
 * @class PatientDocumentControllerApi
 * @extends {BaseAPI}
 */
export class PatientDocumentControllerApi extends BaseAPI implements PatientDocumentControllerApiInterface {
    /**
     * 
     * @param {string} patientId 
     * @param {boolean} isSharedWithPatient 
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientDocumentControllerApi
     */
    public createPatientDocument(patientId: string, isSharedWithPatient: boolean, file: File, options?: RawAxiosRequestConfig) {
        return PatientDocumentControllerApiFp(this.configuration).createPatientDocument(patientId, isSharedWithPatient, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreatePatientDocumentFromTherapistDocumentDTO} createPatientDocumentFromTherapistDocumentDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientDocumentControllerApi
     */
    public createPatientDocumentFromTherapistDocument(createPatientDocumentFromTherapistDocumentDTO: CreatePatientDocumentFromTherapistDocumentDTO, options?: RawAxiosRequestConfig) {
        return PatientDocumentControllerApiFp(this.configuration).createPatientDocumentFromTherapistDocument(createPatientDocumentFromTherapistDocumentDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} patientDocumentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientDocumentControllerApi
     */
    public deletePatientDocument(patientDocumentId: string, options?: RawAxiosRequestConfig) {
        return PatientDocumentControllerApiFp(this.configuration).deletePatientDocument(patientDocumentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} patientDocumentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientDocumentControllerApi
     */
    public downloadPatientDocument(patientDocumentId: string, options?: RawAxiosRequestConfig) {
        return PatientDocumentControllerApiFp(this.configuration).downloadPatientDocument(patientDocumentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} patientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientDocumentControllerApi
     */
    public getDocumentsOfPatient(patientId: string, options?: RawAxiosRequestConfig) {
        return PatientDocumentControllerApiFp(this.configuration).getDocumentsOfPatient(patientId, options).then((request) => request(this.axios, this.basePath));
    }
}

