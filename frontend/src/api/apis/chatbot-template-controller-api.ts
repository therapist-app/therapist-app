/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateChatbotTemplateDTO } from '../models';
// @ts-ignore
import type { TherapistOutputDTO } from '../models';
/**
 * ChatbotTemplateControllerApi - axios parameter creator
 * @export
 */
export const ChatbotTemplateControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloneTemplate: async (templateId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('cloneTemplate', 'templateId', templateId)
            const localVarPath = `/chatbot-templates/{templateId}/clone`
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateChatbotTemplateDTO} createChatbotTemplateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTemplate: async (createChatbotTemplateDTO: CreateChatbotTemplateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createChatbotTemplateDTO' is not null or undefined
            assertParamExists('createTemplate', 'createChatbotTemplateDTO', createChatbotTemplateDTO)
            const localVarPath = `/chatbot-templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createChatbotTemplateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplate: async (templateId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('deleteTemplate', 'templateId', templateId)
            const localVarPath = `/chatbot-templates/{templateId}`
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} templateId 
         * @param {CreateChatbotTemplateDTO} createChatbotTemplateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplate: async (templateId: string, createChatbotTemplateDTO: CreateChatbotTemplateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('updateTemplate', 'templateId', templateId)
            // verify required parameter 'createChatbotTemplateDTO' is not null or undefined
            assertParamExists('updateTemplate', 'createChatbotTemplateDTO', createChatbotTemplateDTO)
            const localVarPath = `/chatbot-templates/{templateId}`
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createChatbotTemplateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChatbotTemplateControllerApi - functional programming interface
 * @export
 */
export const ChatbotTemplateControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChatbotTemplateControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloneTemplate(templateId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TherapistOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloneTemplate(templateId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatbotTemplateControllerApi.cloneTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateChatbotTemplateDTO} createChatbotTemplateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTemplate(createChatbotTemplateDTO: CreateChatbotTemplateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TherapistOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTemplate(createChatbotTemplateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatbotTemplateControllerApi.createTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTemplate(templateId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TherapistOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTemplate(templateId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatbotTemplateControllerApi.deleteTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} templateId 
         * @param {CreateChatbotTemplateDTO} createChatbotTemplateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTemplate(templateId: string, createChatbotTemplateDTO: CreateChatbotTemplateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TherapistOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTemplate(templateId, createChatbotTemplateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatbotTemplateControllerApi.updateTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ChatbotTemplateControllerApi - factory interface
 * @export
 */
export const ChatbotTemplateControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChatbotTemplateControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloneTemplate(templateId: string, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO> {
            return localVarFp.cloneTemplate(templateId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateChatbotTemplateDTO} createChatbotTemplateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTemplate(createChatbotTemplateDTO: CreateChatbotTemplateDTO, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO> {
            return localVarFp.createTemplate(createChatbotTemplateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplate(templateId: string, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO> {
            return localVarFp.deleteTemplate(templateId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} templateId 
         * @param {CreateChatbotTemplateDTO} createChatbotTemplateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplate(templateId: string, createChatbotTemplateDTO: CreateChatbotTemplateDTO, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO> {
            return localVarFp.updateTemplate(templateId, createChatbotTemplateDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChatbotTemplateControllerApi - interface
 * @export
 * @interface ChatbotTemplateControllerApi
 */
export interface ChatbotTemplateControllerApiInterface {
    /**
     * 
     * @param {string} templateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotTemplateControllerApiInterface
     */
    cloneTemplate(templateId: string, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO>;

    /**
     * 
     * @param {CreateChatbotTemplateDTO} createChatbotTemplateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotTemplateControllerApiInterface
     */
    createTemplate(createChatbotTemplateDTO: CreateChatbotTemplateDTO, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO>;

    /**
     * 
     * @param {string} templateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotTemplateControllerApiInterface
     */
    deleteTemplate(templateId: string, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO>;

    /**
     * 
     * @param {string} templateId 
     * @param {CreateChatbotTemplateDTO} createChatbotTemplateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotTemplateControllerApiInterface
     */
    updateTemplate(templateId: string, createChatbotTemplateDTO: CreateChatbotTemplateDTO, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO>;

}

/**
 * ChatbotTemplateControllerApi - object-oriented interface
 * @export
 * @class ChatbotTemplateControllerApi
 * @extends {BaseAPI}
 */
export class ChatbotTemplateControllerApi extends BaseAPI implements ChatbotTemplateControllerApiInterface {
    /**
     * 
     * @param {string} templateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotTemplateControllerApi
     */
    public cloneTemplate(templateId: string, options?: RawAxiosRequestConfig) {
        return ChatbotTemplateControllerApiFp(this.configuration).cloneTemplate(templateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateChatbotTemplateDTO} createChatbotTemplateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotTemplateControllerApi
     */
    public createTemplate(createChatbotTemplateDTO: CreateChatbotTemplateDTO, options?: RawAxiosRequestConfig) {
        return ChatbotTemplateControllerApiFp(this.configuration).createTemplate(createChatbotTemplateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} templateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotTemplateControllerApi
     */
    public deleteTemplate(templateId: string, options?: RawAxiosRequestConfig) {
        return ChatbotTemplateControllerApiFp(this.configuration).deleteTemplate(templateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} templateId 
     * @param {CreateChatbotTemplateDTO} createChatbotTemplateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotTemplateControllerApi
     */
    public updateTemplate(templateId: string, createChatbotTemplateDTO: CreateChatbotTemplateDTO, options?: RawAxiosRequestConfig) {
        return ChatbotTemplateControllerApiFp(this.configuration).updateTemplate(templateId, createChatbotTemplateDTO, options).then((request) => request(this.axios, this.basePath));
    }
}

