/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateGAD7TestDTO } from '../models';
// @ts-ignore
import type { GAD7TestOutputDTO } from '../models';
/**
 * PatientTestControllerApi - axios parameter creator
 * @export
 */
export const PatientTestControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateGAD7TestDTO} createGAD7TestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTest: async (createGAD7TestDTO: CreateGAD7TestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createGAD7TestDTO' is not null or undefined
            assertParamExists('createTest', 'createGAD7TestDTO', createGAD7TestDTO)
            const localVarPath = `/tests/gad7`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGAD7TestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestById: async (testId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testId' is not null or undefined
            assertParamExists('getTestById', 'testId', testId)
            const localVarPath = `/tests/gad7/{testId}`
                .replace(`{${"testId"}}`, encodeURIComponent(String(testId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} meetingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestsByMeeting: async (meetingId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('getTestsByMeeting', 'meetingId', meetingId)
            const localVarPath = `/tests/gad7/meeting/{meetingId}`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestsForPatient: async (patientId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientId' is not null or undefined
            assertParamExists('getTestsForPatient', 'patientId', patientId)
            const localVarPath = `/tests/gad7/patient/{patientId}`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PatientTestControllerApi - functional programming interface
 * @export
 */
export const PatientTestControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PatientTestControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateGAD7TestDTO} createGAD7TestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTest(createGAD7TestDTO: CreateGAD7TestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GAD7TestOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTest(createGAD7TestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientTestControllerApi.createTest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTestById(testId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GAD7TestOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTestById(testId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientTestControllerApi.getTestById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} meetingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTestsByMeeting(meetingId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GAD7TestOutputDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTestsByMeeting(meetingId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientTestControllerApi.getTestsByMeeting']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTestsForPatient(patientId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GAD7TestOutputDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTestsForPatient(patientId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientTestControllerApi.getTestsForPatient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PatientTestControllerApi - factory interface
 * @export
 */
export const PatientTestControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PatientTestControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateGAD7TestDTO} createGAD7TestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTest(createGAD7TestDTO: CreateGAD7TestDTO, options?: RawAxiosRequestConfig): AxiosPromise<GAD7TestOutputDTO> {
            return localVarFp.createTest(createGAD7TestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestById(testId: string, options?: RawAxiosRequestConfig): AxiosPromise<GAD7TestOutputDTO> {
            return localVarFp.getTestById(testId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} meetingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestsByMeeting(meetingId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GAD7TestOutputDTO>> {
            return localVarFp.getTestsByMeeting(meetingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestsForPatient(patientId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GAD7TestOutputDTO>> {
            return localVarFp.getTestsForPatient(patientId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PatientTestControllerApi - interface
 * @export
 * @interface PatientTestControllerApi
 */
export interface PatientTestControllerApiInterface {
    /**
     * 
     * @param {CreateGAD7TestDTO} createGAD7TestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientTestControllerApiInterface
     */
    createTest(createGAD7TestDTO: CreateGAD7TestDTO, options?: RawAxiosRequestConfig): AxiosPromise<GAD7TestOutputDTO>;

    /**
     * 
     * @param {string} testId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientTestControllerApiInterface
     */
    getTestById(testId: string, options?: RawAxiosRequestConfig): AxiosPromise<GAD7TestOutputDTO>;

    /**
     * 
     * @param {string} meetingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientTestControllerApiInterface
     */
    getTestsByMeeting(meetingId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GAD7TestOutputDTO>>;

    /**
     * 
     * @param {string} patientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientTestControllerApiInterface
     */
    getTestsForPatient(patientId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GAD7TestOutputDTO>>;

}

/**
 * PatientTestControllerApi - object-oriented interface
 * @export
 * @class PatientTestControllerApi
 * @extends {BaseAPI}
 */
export class PatientTestControllerApi extends BaseAPI implements PatientTestControllerApiInterface {
    /**
     * 
     * @param {CreateGAD7TestDTO} createGAD7TestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientTestControllerApi
     */
    public createTest(createGAD7TestDTO: CreateGAD7TestDTO, options?: RawAxiosRequestConfig) {
        return PatientTestControllerApiFp(this.configuration).createTest(createGAD7TestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} testId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientTestControllerApi
     */
    public getTestById(testId: string, options?: RawAxiosRequestConfig) {
        return PatientTestControllerApiFp(this.configuration).getTestById(testId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} meetingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientTestControllerApi
     */
    public getTestsByMeeting(meetingId: string, options?: RawAxiosRequestConfig) {
        return PatientTestControllerApiFp(this.configuration).getTestsByMeeting(meetingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} patientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientTestControllerApi
     */
    public getTestsForPatient(patientId: string, options?: RawAxiosRequestConfig) {
        return PatientTestControllerApiFp(this.configuration).getTestsForPatient(patientId, options).then((request) => request(this.axios, this.basePath));
    }
}

