/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { PsychologicalTestCreateDTO } from '../models';
// @ts-ignore
import type { PsychologicalTestOutputDTO } from '../models';
/**
 * PatientTestControllerApi - axios parameter creator
 * @export
 */
export const PatientTestControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} patientId 
         * @param {string} psychologicalTestName 
         * @param {PsychologicalTestCreateDTO} psychologicalTestCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignPsychologicalTestToPatient: async (patientId: string, psychologicalTestName: string, psychologicalTestCreateDTO: PsychologicalTestCreateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientId' is not null or undefined
            assertParamExists('assignPsychologicalTestToPatient', 'patientId', patientId)
            // verify required parameter 'psychologicalTestName' is not null or undefined
            assertParamExists('assignPsychologicalTestToPatient', 'psychologicalTestName', psychologicalTestName)
            // verify required parameter 'psychologicalTestCreateDTO' is not null or undefined
            assertParamExists('assignPsychologicalTestToPatient', 'psychologicalTestCreateDTO', psychologicalTestCreateDTO)
            const localVarPath = `/tests/patient/{patientId}/psychological-tests/{psychologicalTestName}/config`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)))
                .replace(`{${"psychologicalTestName"}}`, encodeURIComponent(String(psychologicalTestName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(psychologicalTestCreateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} patientId 
         * @param {string} psychologicalTestName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPsychologicalTestToPatient: async (patientId: string, psychologicalTestName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientId' is not null or undefined
            assertParamExists('getPsychologicalTestToPatient', 'patientId', patientId)
            // verify required parameter 'psychologicalTestName' is not null or undefined
            assertParamExists('getPsychologicalTestToPatient', 'psychologicalTestName', psychologicalTestName)
            const localVarPath = `/tests/patient/{patientId}/psychological-tests/{psychologicalTestName}/config`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)))
                .replace(`{${"psychologicalTestName"}}`, encodeURIComponent(String(psychologicalTestName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} patientId 
         * @param {string} psychologicalTestName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestsForPatient: async (patientId: string, psychologicalTestName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientId' is not null or undefined
            assertParamExists('getTestsForPatient', 'patientId', patientId)
            // verify required parameter 'psychologicalTestName' is not null or undefined
            assertParamExists('getTestsForPatient', 'psychologicalTestName', psychologicalTestName)
            const localVarPath = `/tests/patient/{patientId}/psychological-tests/{psychologicalTestName}`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)))
                .replace(`{${"psychologicalTestName"}}`, encodeURIComponent(String(psychologicalTestName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} patientId 
         * @param {string} psychologicalTestName 
         * @param {PsychologicalTestCreateDTO} psychologicalTestCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePsychologicalTestToPatient: async (patientId: string, psychologicalTestName: string, psychologicalTestCreateDTO: PsychologicalTestCreateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientId' is not null or undefined
            assertParamExists('updatePsychologicalTestToPatient', 'patientId', patientId)
            // verify required parameter 'psychologicalTestName' is not null or undefined
            assertParamExists('updatePsychologicalTestToPatient', 'psychologicalTestName', psychologicalTestName)
            // verify required parameter 'psychologicalTestCreateDTO' is not null or undefined
            assertParamExists('updatePsychologicalTestToPatient', 'psychologicalTestCreateDTO', psychologicalTestCreateDTO)
            const localVarPath = `/tests/patient/{patientId}/psychological-tests/{psychologicalTestName}/config`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)))
                .replace(`{${"psychologicalTestName"}}`, encodeURIComponent(String(psychologicalTestName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(psychologicalTestCreateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PatientTestControllerApi - functional programming interface
 * @export
 */
export const PatientTestControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PatientTestControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} patientId 
         * @param {string} psychologicalTestName 
         * @param {PsychologicalTestCreateDTO} psychologicalTestCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignPsychologicalTestToPatient(patientId: string, psychologicalTestName: string, psychologicalTestCreateDTO: PsychologicalTestCreateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PsychologicalTestCreateDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignPsychologicalTestToPatient(patientId, psychologicalTestName, psychologicalTestCreateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientTestControllerApi.assignPsychologicalTestToPatient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} patientId 
         * @param {string} psychologicalTestName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPsychologicalTestToPatient(patientId: string, psychologicalTestName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PsychologicalTestCreateDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPsychologicalTestToPatient(patientId, psychologicalTestName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientTestControllerApi.getPsychologicalTestToPatient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} patientId 
         * @param {string} psychologicalTestName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTestsForPatient(patientId: string, psychologicalTestName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PsychologicalTestOutputDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTestsForPatient(patientId, psychologicalTestName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientTestControllerApi.getTestsForPatient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} patientId 
         * @param {string} psychologicalTestName 
         * @param {PsychologicalTestCreateDTO} psychologicalTestCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePsychologicalTestToPatient(patientId: string, psychologicalTestName: string, psychologicalTestCreateDTO: PsychologicalTestCreateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PsychologicalTestCreateDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePsychologicalTestToPatient(patientId, psychologicalTestName, psychologicalTestCreateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientTestControllerApi.updatePsychologicalTestToPatient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PatientTestControllerApi - factory interface
 * @export
 */
export const PatientTestControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PatientTestControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} patientId 
         * @param {string} psychologicalTestName 
         * @param {PsychologicalTestCreateDTO} psychologicalTestCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignPsychologicalTestToPatient(patientId: string, psychologicalTestName: string, psychologicalTestCreateDTO: PsychologicalTestCreateDTO, options?: RawAxiosRequestConfig): AxiosPromise<PsychologicalTestCreateDTO> {
            return localVarFp.assignPsychologicalTestToPatient(patientId, psychologicalTestName, psychologicalTestCreateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} patientId 
         * @param {string} psychologicalTestName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPsychologicalTestToPatient(patientId: string, psychologicalTestName: string, options?: RawAxiosRequestConfig): AxiosPromise<PsychologicalTestCreateDTO> {
            return localVarFp.getPsychologicalTestToPatient(patientId, psychologicalTestName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} patientId 
         * @param {string} psychologicalTestName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestsForPatient(patientId: string, psychologicalTestName: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<PsychologicalTestOutputDTO>> {
            return localVarFp.getTestsForPatient(patientId, psychologicalTestName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} patientId 
         * @param {string} psychologicalTestName 
         * @param {PsychologicalTestCreateDTO} psychologicalTestCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePsychologicalTestToPatient(patientId: string, psychologicalTestName: string, psychologicalTestCreateDTO: PsychologicalTestCreateDTO, options?: RawAxiosRequestConfig): AxiosPromise<PsychologicalTestCreateDTO> {
            return localVarFp.updatePsychologicalTestToPatient(patientId, psychologicalTestName, psychologicalTestCreateDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PatientTestControllerApi - interface
 * @export
 * @interface PatientTestControllerApi
 */
export interface PatientTestControllerApiInterface {
    /**
     * 
     * @param {string} patientId 
     * @param {string} psychologicalTestName 
     * @param {PsychologicalTestCreateDTO} psychologicalTestCreateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientTestControllerApiInterface
     */
    assignPsychologicalTestToPatient(patientId: string, psychologicalTestName: string, psychologicalTestCreateDTO: PsychologicalTestCreateDTO, options?: RawAxiosRequestConfig): AxiosPromise<PsychologicalTestCreateDTO>;

    /**
     * 
     * @param {string} patientId 
     * @param {string} psychologicalTestName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientTestControllerApiInterface
     */
    getPsychologicalTestToPatient(patientId: string, psychologicalTestName: string, options?: RawAxiosRequestConfig): AxiosPromise<PsychologicalTestCreateDTO>;

    /**
     * 
     * @param {string} patientId 
     * @param {string} psychologicalTestName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientTestControllerApiInterface
     */
    getTestsForPatient(patientId: string, psychologicalTestName: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<PsychologicalTestOutputDTO>>;

    /**
     * 
     * @param {string} patientId 
     * @param {string} psychologicalTestName 
     * @param {PsychologicalTestCreateDTO} psychologicalTestCreateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientTestControllerApiInterface
     */
    updatePsychologicalTestToPatient(patientId: string, psychologicalTestName: string, psychologicalTestCreateDTO: PsychologicalTestCreateDTO, options?: RawAxiosRequestConfig): AxiosPromise<PsychologicalTestCreateDTO>;

}

/**
 * PatientTestControllerApi - object-oriented interface
 * @export
 * @class PatientTestControllerApi
 * @extends {BaseAPI}
 */
export class PatientTestControllerApi extends BaseAPI implements PatientTestControllerApiInterface {
    /**
     * 
     * @param {string} patientId 
     * @param {string} psychologicalTestName 
     * @param {PsychologicalTestCreateDTO} psychologicalTestCreateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientTestControllerApi
     */
    public assignPsychologicalTestToPatient(patientId: string, psychologicalTestName: string, psychologicalTestCreateDTO: PsychologicalTestCreateDTO, options?: RawAxiosRequestConfig) {
        return PatientTestControllerApiFp(this.configuration).assignPsychologicalTestToPatient(patientId, psychologicalTestName, psychologicalTestCreateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} patientId 
     * @param {string} psychologicalTestName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientTestControllerApi
     */
    public getPsychologicalTestToPatient(patientId: string, psychologicalTestName: string, options?: RawAxiosRequestConfig) {
        return PatientTestControllerApiFp(this.configuration).getPsychologicalTestToPatient(patientId, psychologicalTestName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} patientId 
     * @param {string} psychologicalTestName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientTestControllerApi
     */
    public getTestsForPatient(patientId: string, psychologicalTestName: string, options?: RawAxiosRequestConfig) {
        return PatientTestControllerApiFp(this.configuration).getTestsForPatient(patientId, psychologicalTestName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} patientId 
     * @param {string} psychologicalTestName 
     * @param {PsychologicalTestCreateDTO} psychologicalTestCreateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientTestControllerApi
     */
    public updatePsychologicalTestToPatient(patientId: string, psychologicalTestName: string, psychologicalTestCreateDTO: PsychologicalTestCreateDTO, options?: RawAxiosRequestConfig) {
        return PatientTestControllerApiFp(this.configuration).updatePsychologicalTestToPatient(patientId, psychologicalTestName, psychologicalTestCreateDTO, options).then((request) => request(this.axios, this.basePath));
    }
}

