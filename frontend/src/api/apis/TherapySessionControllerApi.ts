/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type { CreateTherapySessionDTO, TherapySessionOutputDTO } from '../models/index'
import {
  CreateTherapySessionDTOFromJSON,
  CreateTherapySessionDTOToJSON,
  TherapySessionOutputDTOFromJSON,
  TherapySessionOutputDTOToJSON,
} from '../models/index'

export interface CreateSessionRequest {
  createTherapySessionDTO: CreateTherapySessionDTO
}

export interface GetTherapySessionByIdRequest {
  therapySessionId: string
}

export interface GetTherapySessionsOfPatientRequest {
  patientId: string
}

/**
 * TherapySessionControllerApi - interface
 *
 * @export
 * @interface TherapySessionControllerApiInterface
 */
export interface TherapySessionControllerApiInterface {
  /**
   *
   * @param {CreateTherapySessionDTO} createTherapySessionDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TherapySessionControllerApiInterface
   */
  createSessionRaw(
    requestParameters: CreateSessionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TherapySessionOutputDTO>>

  /**
   */
  createSession(
    requestParameters: CreateSessionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TherapySessionOutputDTO>

  /**
   *
   * @param {string} therapySessionId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TherapySessionControllerApiInterface
   */
  getTherapySessionByIdRaw(
    requestParameters: GetTherapySessionByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TherapySessionOutputDTO>>

  /**
   */
  getTherapySessionById(
    requestParameters: GetTherapySessionByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TherapySessionOutputDTO>

  /**
   *
   * @param {string} patientId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TherapySessionControllerApiInterface
   */
  getTherapySessionsOfPatientRaw(
    requestParameters: GetTherapySessionsOfPatientRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<TherapySessionOutputDTO>>>

  /**
   */
  getTherapySessionsOfPatient(
    requestParameters: GetTherapySessionsOfPatientRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<TherapySessionOutputDTO>>
}

/**
 *
 */
export class TherapySessionControllerApi
  extends runtime.BaseAPI
  implements TherapySessionControllerApiInterface
{
  /**
   */
  async createSessionRaw(
    requestParameters: CreateSessionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TherapySessionOutputDTO>> {
    if (requestParameters['createTherapySessionDTO'] == null) {
      throw new runtime.RequiredError(
        'createTherapySessionDTO',
        'Required parameter "createTherapySessionDTO" was null or undefined when calling createSession().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request(
      {
        path: `/therapy-sessions`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreateTherapySessionDTOToJSON(requestParameters['createTherapySessionDTO']),
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TherapySessionOutputDTOFromJSON(jsonValue)
    )
  }

  /**
   */
  async createSession(
    requestParameters: CreateSessionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TherapySessionOutputDTO> {
    const response = await this.createSessionRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async getTherapySessionByIdRaw(
    requestParameters: GetTherapySessionByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TherapySessionOutputDTO>> {
    if (requestParameters['therapySessionId'] == null) {
      throw new runtime.RequiredError(
        'therapySessionId',
        'Required parameter "therapySessionId" was null or undefined when calling getTherapySessionById().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/therapy-sessions/{therapySessionId}`.replace(
          `{${'therapySessionId'}}`,
          encodeURIComponent(String(requestParameters['therapySessionId']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TherapySessionOutputDTOFromJSON(jsonValue)
    )
  }

  /**
   */
  async getTherapySessionById(
    requestParameters: GetTherapySessionByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TherapySessionOutputDTO> {
    const response = await this.getTherapySessionByIdRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async getTherapySessionsOfPatientRaw(
    requestParameters: GetTherapySessionsOfPatientRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<TherapySessionOutputDTO>>> {
    if (requestParameters['patientId'] == null) {
      throw new runtime.RequiredError(
        'patientId',
        'Required parameter "patientId" was null or undefined when calling getTherapySessionsOfPatient().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/therapy-sessions/patients/{patientId}`.replace(
          `{${'patientId'}}`,
          encodeURIComponent(String(requestParameters['patientId']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(TherapySessionOutputDTOFromJSON)
    )
  }

  /**
   */
  async getTherapySessionsOfPatient(
    requestParameters: GetTherapySessionsOfPatientRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<TherapySessionOutputDTO>> {
    const response = await this.getTherapySessionsOfPatientRaw(requestParameters, initOverrides)
    return await response.value()
  }
}
