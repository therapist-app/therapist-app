/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateMeetingDTO } from '../models';
// @ts-ignore
import type { MeetingOutputDTO } from '../models';
// @ts-ignore
import type { UpdateMeetingDTO } from '../models';
/**
 * MeetingControllerApi - axios parameter creator
 * @export
 */
export const MeetingControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateMeetingDTO} createMeetingDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMeeting: async (createMeetingDTO: CreateMeetingDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createMeetingDTO' is not null or undefined
            assertParamExists('createMeeting', 'createMeetingDTO', createMeetingDTO)
            const localVarPath = `/meetings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMeetingDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} meetingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMeetingById: async (meetingId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('deleteMeetingById', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} meetingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingById: async (meetingId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('getMeetingById', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingsOfPatient: async (patientId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientId' is not null or undefined
            assertParamExists('getMeetingsOfPatient', 'patientId', patientId)
            const localVarPath = `/meetings/patients/{patientId}`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateMeetingDTO} updateMeetingDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMeeting: async (updateMeetingDTO: UpdateMeetingDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateMeetingDTO' is not null or undefined
            assertParamExists('updateMeeting', 'updateMeetingDTO', updateMeetingDTO)
            const localVarPath = `/meetings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMeetingDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MeetingControllerApi - functional programming interface
 * @export
 */
export const MeetingControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MeetingControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateMeetingDTO} createMeetingDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMeeting(createMeetingDTO: CreateMeetingDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMeeting(createMeetingDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MeetingControllerApi.createMeeting']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} meetingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMeetingById(meetingId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMeetingById(meetingId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MeetingControllerApi.deleteMeetingById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} meetingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeetingById(meetingId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeetingById(meetingId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MeetingControllerApi.getMeetingById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeetingsOfPatient(patientId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MeetingOutputDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeetingsOfPatient(patientId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MeetingControllerApi.getMeetingsOfPatient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateMeetingDTO} updateMeetingDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMeeting(updateMeetingDTO: UpdateMeetingDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMeeting(updateMeetingDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MeetingControllerApi.updateMeeting']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MeetingControllerApi - factory interface
 * @export
 */
export const MeetingControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MeetingControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateMeetingDTO} createMeetingDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMeeting(createMeetingDTO: CreateMeetingDTO, options?: RawAxiosRequestConfig): AxiosPromise<MeetingOutputDTO> {
            return localVarFp.createMeeting(createMeetingDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} meetingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMeetingById(meetingId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteMeetingById(meetingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} meetingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingById(meetingId: string, options?: RawAxiosRequestConfig): AxiosPromise<MeetingOutputDTO> {
            return localVarFp.getMeetingById(meetingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingsOfPatient(patientId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<MeetingOutputDTO>> {
            return localVarFp.getMeetingsOfPatient(patientId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateMeetingDTO} updateMeetingDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMeeting(updateMeetingDTO: UpdateMeetingDTO, options?: RawAxiosRequestConfig): AxiosPromise<MeetingOutputDTO> {
            return localVarFp.updateMeeting(updateMeetingDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MeetingControllerApi - interface
 * @export
 * @interface MeetingControllerApi
 */
export interface MeetingControllerApiInterface {
    /**
     * 
     * @param {CreateMeetingDTO} createMeetingDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingControllerApiInterface
     */
    createMeeting(createMeetingDTO: CreateMeetingDTO, options?: RawAxiosRequestConfig): AxiosPromise<MeetingOutputDTO>;

    /**
     * 
     * @param {string} meetingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingControllerApiInterface
     */
    deleteMeetingById(meetingId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} meetingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingControllerApiInterface
     */
    getMeetingById(meetingId: string, options?: RawAxiosRequestConfig): AxiosPromise<MeetingOutputDTO>;

    /**
     * 
     * @param {string} patientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingControllerApiInterface
     */
    getMeetingsOfPatient(patientId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<MeetingOutputDTO>>;

    /**
     * 
     * @param {UpdateMeetingDTO} updateMeetingDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingControllerApiInterface
     */
    updateMeeting(updateMeetingDTO: UpdateMeetingDTO, options?: RawAxiosRequestConfig): AxiosPromise<MeetingOutputDTO>;

}

/**
 * MeetingControllerApi - object-oriented interface
 * @export
 * @class MeetingControllerApi
 * @extends {BaseAPI}
 */
export class MeetingControllerApi extends BaseAPI implements MeetingControllerApiInterface {
    /**
     * 
     * @param {CreateMeetingDTO} createMeetingDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingControllerApi
     */
    public createMeeting(createMeetingDTO: CreateMeetingDTO, options?: RawAxiosRequestConfig) {
        return MeetingControllerApiFp(this.configuration).createMeeting(createMeetingDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} meetingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingControllerApi
     */
    public deleteMeetingById(meetingId: string, options?: RawAxiosRequestConfig) {
        return MeetingControllerApiFp(this.configuration).deleteMeetingById(meetingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} meetingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingControllerApi
     */
    public getMeetingById(meetingId: string, options?: RawAxiosRequestConfig) {
        return MeetingControllerApiFp(this.configuration).getMeetingById(meetingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} patientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingControllerApi
     */
    public getMeetingsOfPatient(patientId: string, options?: RawAxiosRequestConfig) {
        return MeetingControllerApiFp(this.configuration).getMeetingsOfPatient(patientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateMeetingDTO} updateMeetingDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingControllerApi
     */
    public updateMeeting(updateMeetingDTO: UpdateMeetingDTO, options?: RawAxiosRequestConfig) {
        return MeetingControllerApiFp(this.configuration).updateMeeting(updateMeetingDTO, options).then((request) => request(this.axios, this.basePath));
    }
}

