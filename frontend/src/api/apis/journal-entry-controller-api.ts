/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CoachGetAllJournalEntriesDTOPatientAPI } from '../models';
// @ts-ignore
import type { CoachJournalEntryOutputDTOPatientAPI } from '../models';
/**
 * JournalEntryControllerApi - axios parameter creator
 * @export
 */
export const JournalEntryControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} patientId 
         * @param {string} journalEntryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneJournalEntry: async (patientId: string, journalEntryId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientId' is not null or undefined
            assertParamExists('getOneJournalEntry', 'patientId', patientId)
            // verify required parameter 'journalEntryId' is not null or undefined
            assertParamExists('getOneJournalEntry', 'journalEntryId', journalEntryId)
            const localVarPath = `/journal-entries/{patientId}/{journalEntryId}`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)))
                .replace(`{${"journalEntryId"}}`, encodeURIComponent(String(journalEntryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllJournalEntries: async (patientId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientId' is not null or undefined
            assertParamExists('listAllJournalEntries', 'patientId', patientId)
            const localVarPath = `/journal-entries/{patientId}`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JournalEntryControllerApi - functional programming interface
 * @export
 */
export const JournalEntryControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JournalEntryControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} patientId 
         * @param {string} journalEntryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOneJournalEntry(patientId: string, journalEntryId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoachJournalEntryOutputDTOPatientAPI>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOneJournalEntry(patientId, journalEntryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JournalEntryControllerApi.getOneJournalEntry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllJournalEntries(patientId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CoachGetAllJournalEntriesDTOPatientAPI>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllJournalEntries(patientId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JournalEntryControllerApi.listAllJournalEntries']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * JournalEntryControllerApi - factory interface
 * @export
 */
export const JournalEntryControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JournalEntryControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} patientId 
         * @param {string} journalEntryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneJournalEntry(patientId: string, journalEntryId: string, options?: RawAxiosRequestConfig): AxiosPromise<CoachJournalEntryOutputDTOPatientAPI> {
            return localVarFp.getOneJournalEntry(patientId, journalEntryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllJournalEntries(patientId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<CoachGetAllJournalEntriesDTOPatientAPI>> {
            return localVarFp.listAllJournalEntries(patientId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JournalEntryControllerApi - interface
 * @export
 * @interface JournalEntryControllerApi
 */
export interface JournalEntryControllerApiInterface {
    /**
     * 
     * @param {string} patientId 
     * @param {string} journalEntryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JournalEntryControllerApiInterface
     */
    getOneJournalEntry(patientId: string, journalEntryId: string, options?: RawAxiosRequestConfig): AxiosPromise<CoachJournalEntryOutputDTOPatientAPI>;

    /**
     * 
     * @param {string} patientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JournalEntryControllerApiInterface
     */
    listAllJournalEntries(patientId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<CoachGetAllJournalEntriesDTOPatientAPI>>;

}

/**
 * JournalEntryControllerApi - object-oriented interface
 * @export
 * @class JournalEntryControllerApi
 * @extends {BaseAPI}
 */
export class JournalEntryControllerApi extends BaseAPI implements JournalEntryControllerApiInterface {
    /**
     * 
     * @param {string} patientId 
     * @param {string} journalEntryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JournalEntryControllerApi
     */
    public getOneJournalEntry(patientId: string, journalEntryId: string, options?: RawAxiosRequestConfig) {
        return JournalEntryControllerApiFp(this.configuration).getOneJournalEntry(patientId, journalEntryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} patientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JournalEntryControllerApi
     */
    public listAllJournalEntries(patientId: string, options?: RawAxiosRequestConfig) {
        return JournalEntryControllerApiFp(this.configuration).listAllJournalEntries(patientId, options).then((request) => request(this.axios, this.basePath));
    }
}

