/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateTherapistDTO } from '../models';
// @ts-ignore
import type { LoginTherapistDTO } from '../models';
// @ts-ignore
import type { TherapistOutputDTO } from '../models';
/**
 * TherapistControllerApi - axios parameter creator
 * @export
 */
export const TherapistControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateTherapistDTO} createTherapistDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTherapist: async (createTherapistDTO: CreateTherapistDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTherapistDTO' is not null or undefined
            assertParamExists('createTherapist', 'createTherapistDTO', createTherapistDTO)
            const localVarPath = `/therapists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTherapistDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentlyLoggedInTherapist: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/therapists/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginTherapistDTO} loginTherapistDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginTherapist: async (loginTherapistDTO: LoginTherapistDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginTherapistDTO' is not null or undefined
            assertParamExists('loginTherapist', 'loginTherapistDTO', loginTherapistDTO)
            const localVarPath = `/therapists/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginTherapistDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutTherapist: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/therapists/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TherapistControllerApi - functional programming interface
 * @export
 */
export const TherapistControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TherapistControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateTherapistDTO} createTherapistDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTherapist(createTherapistDTO: CreateTherapistDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TherapistOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTherapist(createTherapistDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TherapistControllerApi.createTherapist']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentlyLoggedInTherapist(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TherapistOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentlyLoggedInTherapist(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TherapistControllerApi.getCurrentlyLoggedInTherapist']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LoginTherapistDTO} loginTherapistDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginTherapist(loginTherapistDTO: LoginTherapistDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TherapistOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginTherapist(loginTherapistDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TherapistControllerApi.loginTherapist']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logoutTherapist(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logoutTherapist(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TherapistControllerApi.logoutTherapist']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TherapistControllerApi - factory interface
 * @export
 */
export const TherapistControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TherapistControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateTherapistDTO} createTherapistDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTherapist(createTherapistDTO: CreateTherapistDTO, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO> {
            return localVarFp.createTherapist(createTherapistDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentlyLoggedInTherapist(options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO> {
            return localVarFp.getCurrentlyLoggedInTherapist(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginTherapistDTO} loginTherapistDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginTherapist(loginTherapistDTO: LoginTherapistDTO, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO> {
            return localVarFp.loginTherapist(loginTherapistDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutTherapist(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.logoutTherapist(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TherapistControllerApi - interface
 * @export
 * @interface TherapistControllerApi
 */
export interface TherapistControllerApiInterface {
    /**
     * 
     * @param {CreateTherapistDTO} createTherapistDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapistControllerApiInterface
     */
    createTherapist(createTherapistDTO: CreateTherapistDTO, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapistControllerApiInterface
     */
    getCurrentlyLoggedInTherapist(options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO>;

    /**
     * 
     * @param {LoginTherapistDTO} loginTherapistDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapistControllerApiInterface
     */
    loginTherapist(loginTherapistDTO: LoginTherapistDTO, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapistControllerApiInterface
     */
    logoutTherapist(options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * TherapistControllerApi - object-oriented interface
 * @export
 * @class TherapistControllerApi
 * @extends {BaseAPI}
 */
export class TherapistControllerApi extends BaseAPI implements TherapistControllerApiInterface {
    /**
     * 
     * @param {CreateTherapistDTO} createTherapistDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapistControllerApi
     */
    public createTherapist(createTherapistDTO: CreateTherapistDTO, options?: RawAxiosRequestConfig) {
        return TherapistControllerApiFp(this.configuration).createTherapist(createTherapistDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapistControllerApi
     */
    public getCurrentlyLoggedInTherapist(options?: RawAxiosRequestConfig) {
        return TherapistControllerApiFp(this.configuration).getCurrentlyLoggedInTherapist(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginTherapistDTO} loginTherapistDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapistControllerApi
     */
    public loginTherapist(loginTherapistDTO: LoginTherapistDTO, options?: RawAxiosRequestConfig) {
        return TherapistControllerApiFp(this.configuration).loginTherapist(loginTherapistDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapistControllerApi
     */
    public logoutTherapist(options?: RawAxiosRequestConfig) {
        return TherapistControllerApiFp(this.configuration).logoutTherapist(options).then((request) => request(this.axios, this.basePath));
    }
}

