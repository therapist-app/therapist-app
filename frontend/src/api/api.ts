/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ChatbotTemplateOutputDTO
 */
export interface ChatbotTemplateOutputDTO {
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'chatbotName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'chatbotModel'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'chatbotIcon'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'chatbotLanguage'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'chatbotRole'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'chatbotTone'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'welcomeMessage'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'chatbotVoice'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'chatbotGender'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'preConfiguredExercise'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'additionalExercise'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'animation'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'chatbotInputPlaceholder'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'workspaceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface CreateChatbotTemplateDTO
 */
export interface CreateChatbotTemplateDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateChatbotTemplateDTO
     */
    'chatbotName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChatbotTemplateDTO
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChatbotTemplateDTO
     */
    'chatbotModel'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChatbotTemplateDTO
     */
    'chatbotIcon'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChatbotTemplateDTO
     */
    'chatbotLanguage'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChatbotTemplateDTO
     */
    'chatbotRole'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChatbotTemplateDTO
     */
    'chatbotTone'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChatbotTemplateDTO
     */
    'welcomeMessage'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChatbotTemplateDTO
     */
    'chatbotVoice'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChatbotTemplateDTO
     */
    'chatbotGender'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChatbotTemplateDTO
     */
    'preConfiguredExercise'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChatbotTemplateDTO
     */
    'additionalExercise'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChatbotTemplateDTO
     */
    'animation'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChatbotTemplateDTO
     */
    'chatbotInputPlaceholder'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChatbotTemplateDTO
     */
    'workspaceId'?: string;
}
/**
 * 
 * @export
 * @interface CreateExcerciseDTO
 */
export interface CreateExcerciseDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateExcerciseDTO
     */
    'therapySessionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateExcerciseDTO
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateExcerciseDTO
     */
    'exerciseType'?: CreateExcerciseDTOExerciseTypeEnum;
}

export const CreateExcerciseDTOExerciseTypeEnum = {
    Journaling: 'JOURNALING',
    Breathing: 'BREATHING',
    Other: 'OTHER'
} as const;

export type CreateExcerciseDTOExerciseTypeEnum = typeof CreateExcerciseDTOExerciseTypeEnum[keyof typeof CreateExcerciseDTOExerciseTypeEnum];

/**
 * 
 * @export
 * @interface CreateExerciseFileDTO
 */
export interface CreateExerciseFileDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateExerciseFileDTO
     */
    'exerciseId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateExerciseFileDTO
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface CreateExerciseTextDTO
 */
export interface CreateExerciseTextDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateExerciseTextDTO
     */
    'exerciseId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateExerciseTextDTO
     */
    'text'?: string;
}
/**
 * 
 * @export
 * @interface CreateGAD7TestDTO
 */
export interface CreateGAD7TestDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateGAD7TestDTO
     */
    'patientId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateGAD7TestDTO
     */
    'sessionId'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateGAD7TestDTO
     */
    'question1'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateGAD7TestDTO
     */
    'question2'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateGAD7TestDTO
     */
    'question3'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateGAD7TestDTO
     */
    'question4'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateGAD7TestDTO
     */
    'question5'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateGAD7TestDTO
     */
    'question6'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateGAD7TestDTO
     */
    'question7'?: number;
}
/**
 * 
 * @export
 * @interface CreatePatientDTO
 */
export interface CreatePatientDTO {
    /**
     * 
     * @type {string}
     * @memberof CreatePatientDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePatientDTO
     */
    'gender'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreatePatientDTO
     */
    'age'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreatePatientDTO
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePatientDTO
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePatientDTO
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePatientDTO
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface CreateTherapistDTO
 */
export interface CreateTherapistDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateTherapistDTO
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateTherapistDTO
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface CreateTherapySessionDTO
 */
export interface CreateTherapySessionDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateTherapySessionDTO
     */
    'sessionStart'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateTherapySessionDTO
     */
    'sessionEnd'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateTherapySessionDTO
     */
    'patientId'?: string;
}
/**
 * 
 * @export
 * @interface CreateTherapySessionNoteDTO
 */
export interface CreateTherapySessionNoteDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateTherapySessionNoteDTO
     */
    'therapySessionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateTherapySessionNoteDTO
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateTherapySessionNoteDTO
     */
    'content'?: string;
}
/**
 * 
 * @export
 * @interface ExerciseFileOutputDTO
 */
export interface ExerciseFileOutputDTO {
    /**
     * 
     * @type {string}
     * @memberof ExerciseFileOutputDTO
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseFileOutputDTO
     */
    'fileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseFileOutputDTO
     */
    'fileType'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseFileOutputDTO
     */
    'extractedText'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseFileOutputDTO
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof ExerciseFileOutputDTO
     */
    'orderNumber'?: number;
}
/**
 * 
 * @export
 * @interface ExerciseOutputDTO
 */
export interface ExerciseOutputDTO {
    /**
     * 
     * @type {string}
     * @memberof ExerciseOutputDTO
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseOutputDTO
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseOutputDTO
     */
    'exerciseType'?: ExerciseOutputDTOExerciseTypeEnum;
    /**
     * 
     * @type {Array<ExerciseTextOutputDTO>}
     * @memberof ExerciseOutputDTO
     */
    'exerciseTextsOutputDTO'?: Array<ExerciseTextOutputDTO>;
    /**
     * 
     * @type {Array<ExerciseFileOutputDTO>}
     * @memberof ExerciseOutputDTO
     */
    'exerciseFilesOutputDTO'?: Array<ExerciseFileOutputDTO>;
}

export const ExerciseOutputDTOExerciseTypeEnum = {
    Journaling: 'JOURNALING',
    Breathing: 'BREATHING',
    Other: 'OTHER'
} as const;

export type ExerciseOutputDTOExerciseTypeEnum = typeof ExerciseOutputDTOExerciseTypeEnum[keyof typeof ExerciseOutputDTOExerciseTypeEnum];

/**
 * 
 * @export
 * @interface ExerciseTextOutputDTO
 */
export interface ExerciseTextOutputDTO {
    /**
     * 
     * @type {string}
     * @memberof ExerciseTextOutputDTO
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseTextOutputDTO
     */
    'text'?: string;
    /**
     * 
     * @type {number}
     * @memberof ExerciseTextOutputDTO
     */
    'orderNumber'?: number;
}
/**
 * 
 * @export
 * @interface GAD7TestOutputDTO
 */
export interface GAD7TestOutputDTO {
    /**
     * 
     * @type {string}
     * @memberof GAD7TestOutputDTO
     */
    'testId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GAD7TestOutputDTO
     */
    'patientId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GAD7TestOutputDTO
     */
    'sessionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GAD7TestOutputDTO
     */
    'creationDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof GAD7TestOutputDTO
     */
    'question1'?: number;
    /**
     * 
     * @type {number}
     * @memberof GAD7TestOutputDTO
     */
    'question2'?: number;
    /**
     * 
     * @type {number}
     * @memberof GAD7TestOutputDTO
     */
    'question3'?: number;
    /**
     * 
     * @type {number}
     * @memberof GAD7TestOutputDTO
     */
    'question4'?: number;
    /**
     * 
     * @type {number}
     * @memberof GAD7TestOutputDTO
     */
    'question5'?: number;
    /**
     * 
     * @type {number}
     * @memberof GAD7TestOutputDTO
     */
    'question6'?: number;
    /**
     * 
     * @type {number}
     * @memberof GAD7TestOutputDTO
     */
    'question7'?: number;
}
/**
 * 
 * @export
 * @interface LoginTherapistDTO
 */
export interface LoginTherapistDTO {
    /**
     * 
     * @type {string}
     * @memberof LoginTherapistDTO
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginTherapistDTO
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface PatientDocumentOutputDTO
 */
export interface PatientDocumentOutputDTO {
    /**
     * 
     * @type {string}
     * @memberof PatientDocumentOutputDTO
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientDocumentOutputDTO
     */
    'fileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientDocumentOutputDTO
     */
    'fileType'?: string;
}
/**
 * 
 * @export
 * @interface PatientOutputDTO
 */
export interface PatientOutputDTO {
    /**
     * 
     * @type {string}
     * @memberof PatientOutputDTO
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientOutputDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientOutputDTO
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientOutputDTO
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientOutputDTO
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientOutputDTO
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientOutputDTO
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientOutputDTO
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof PatientOutputDTO
     */
    'age'?: number;
    /**
     * 
     * @type {string}
     * @memberof PatientOutputDTO
     */
    'email'?: string;
    /**
     * 
     * @type {Array<TherapySessionOutputDTO>}
     * @memberof PatientOutputDTO
     */
    'therapySessionsOutputDTO'?: Array<TherapySessionOutputDTO>;
}
/**
 * 
 * @export
 * @interface TherapistOutputDTO
 */
export interface TherapistOutputDTO {
    /**
     * 
     * @type {string}
     * @memberof TherapistOutputDTO
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TherapistOutputDTO
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof TherapistOutputDTO
     */
    'workspaceId'?: string;
    /**
     * 
     * @type {Array<ChatbotTemplateOutputDTO>}
     * @memberof TherapistOutputDTO
     */
    'chatbotTemplatesOutputDTO'?: Array<ChatbotTemplateOutputDTO>;
    /**
     * 
     * @type {Array<PatientOutputDTO>}
     * @memberof TherapistOutputDTO
     */
    'patientsOutputDTO'?: Array<PatientOutputDTO>;
    /**
     * 
     * @type {string}
     * @memberof TherapistOutputDTO
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TherapistOutputDTO
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface TherapySessionNoteOutputDTO
 */
export interface TherapySessionNoteOutputDTO {
    /**
     * 
     * @type {string}
     * @memberof TherapySessionNoteOutputDTO
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TherapySessionNoteOutputDTO
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TherapySessionNoteOutputDTO
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TherapySessionNoteOutputDTO
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof TherapySessionNoteOutputDTO
     */
    'content'?: string;
}
/**
 * 
 * @export
 * @interface TherapySessionOutputDTO
 */
export interface TherapySessionOutputDTO {
    /**
     * 
     * @type {string}
     * @memberof TherapySessionOutputDTO
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TherapySessionOutputDTO
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TherapySessionOutputDTO
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TherapySessionOutputDTO
     */
    'sessionStart'?: string;
    /**
     * 
     * @type {string}
     * @memberof TherapySessionOutputDTO
     */
    'sessionEnd'?: string;
    /**
     * 
     * @type {Array<TherapySessionNoteOutputDTO>}
     * @memberof TherapySessionOutputDTO
     */
    'therapySessionNotesOutputDTO'?: Array<TherapySessionNoteOutputDTO>;
}
/**
 * 
 * @export
 * @interface UpdateExerciseDTO
 */
export interface UpdateExerciseDTO {
    /**
     * 
     * @type {string}
     * @memberof UpdateExerciseDTO
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateExerciseDTO
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateExerciseDTO
     */
    'exerciseType'?: UpdateExerciseDTOExerciseTypeEnum;
}

export const UpdateExerciseDTOExerciseTypeEnum = {
    Journaling: 'JOURNALING',
    Breathing: 'BREATHING',
    Other: 'OTHER'
} as const;

export type UpdateExerciseDTOExerciseTypeEnum = typeof UpdateExerciseDTOExerciseTypeEnum[keyof typeof UpdateExerciseDTOExerciseTypeEnum];

/**
 * 
 * @export
 * @interface UpdateExerciseFileDTO
 */
export interface UpdateExerciseFileDTO {
    /**
     * 
     * @type {string}
     * @memberof UpdateExerciseFileDTO
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateExerciseFileDTO
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateExerciseFileDTO
     */
    'orderNumber'?: number;
}
/**
 * 
 * @export
 * @interface UpdateExerciseTextDTO
 */
export interface UpdateExerciseTextDTO {
    /**
     * 
     * @type {string}
     * @memberof UpdateExerciseTextDTO
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateExerciseTextDTO
     */
    'text'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateExerciseTextDTO
     */
    'orderNumber'?: number;
}
/**
 * 
 * @export
 * @interface UpdateTherapySessionNoteDTO
 */
export interface UpdateTherapySessionNoteDTO {
    /**
     * 
     * @type {string}
     * @memberof UpdateTherapySessionNoteDTO
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateTherapySessionNoteDTO
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateTherapySessionNoteDTO
     */
    'content'?: string;
}

/**
 * ApplicationApi - axios parameter creator
 * @export
 */
export const ApplicationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        helloWorld: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApplicationApi - functional programming interface
 * @export
 */
export const ApplicationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApplicationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async helloWorld(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.helloWorld(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicationApi.helloWorld']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ApplicationApi - factory interface
 * @export
 */
export const ApplicationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApplicationApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        helloWorld(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.helloWorld(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApplicationApi - interface
 * @export
 * @interface ApplicationApi
 */
export interface ApplicationApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApiInterface
     */
    helloWorld(options?: RawAxiosRequestConfig): AxiosPromise<string>;

}

/**
 * ApplicationApi - object-oriented interface
 * @export
 * @class ApplicationApi
 * @extends {BaseAPI}
 */
export class ApplicationApi extends BaseAPI implements ApplicationApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApi
     */
    public helloWorld(options?: RawAxiosRequestConfig) {
        return ApplicationApiFp(this.configuration).helloWorld(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ChatbotTemplateControllerApi - axios parameter creator
 * @export
 */
export const ChatbotTemplateControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloneTemplate: async (templateId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('cloneTemplate', 'templateId', templateId)
            const localVarPath = `/chatbot-templates/{templateId}/clone`
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateChatbotTemplateDTO} createChatbotTemplateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTemplate: async (createChatbotTemplateDTO: CreateChatbotTemplateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createChatbotTemplateDTO' is not null or undefined
            assertParamExists('createTemplate', 'createChatbotTemplateDTO', createChatbotTemplateDTO)
            const localVarPath = `/chatbot-templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createChatbotTemplateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplate: async (templateId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('deleteTemplate', 'templateId', templateId)
            const localVarPath = `/chatbot-templates/{templateId}`
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} templateId 
         * @param {CreateChatbotTemplateDTO} createChatbotTemplateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplate: async (templateId: string, createChatbotTemplateDTO: CreateChatbotTemplateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('updateTemplate', 'templateId', templateId)
            // verify required parameter 'createChatbotTemplateDTO' is not null or undefined
            assertParamExists('updateTemplate', 'createChatbotTemplateDTO', createChatbotTemplateDTO)
            const localVarPath = `/chatbot-templates/{templateId}`
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createChatbotTemplateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChatbotTemplateControllerApi - functional programming interface
 * @export
 */
export const ChatbotTemplateControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChatbotTemplateControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloneTemplate(templateId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TherapistOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloneTemplate(templateId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatbotTemplateControllerApi.cloneTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateChatbotTemplateDTO} createChatbotTemplateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTemplate(createChatbotTemplateDTO: CreateChatbotTemplateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TherapistOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTemplate(createChatbotTemplateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatbotTemplateControllerApi.createTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTemplate(templateId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TherapistOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTemplate(templateId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatbotTemplateControllerApi.deleteTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} templateId 
         * @param {CreateChatbotTemplateDTO} createChatbotTemplateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTemplate(templateId: string, createChatbotTemplateDTO: CreateChatbotTemplateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TherapistOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTemplate(templateId, createChatbotTemplateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatbotTemplateControllerApi.updateTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ChatbotTemplateControllerApi - factory interface
 * @export
 */
export const ChatbotTemplateControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChatbotTemplateControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloneTemplate(templateId: string, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO> {
            return localVarFp.cloneTemplate(templateId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateChatbotTemplateDTO} createChatbotTemplateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTemplate(createChatbotTemplateDTO: CreateChatbotTemplateDTO, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO> {
            return localVarFp.createTemplate(createChatbotTemplateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplate(templateId: string, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO> {
            return localVarFp.deleteTemplate(templateId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} templateId 
         * @param {CreateChatbotTemplateDTO} createChatbotTemplateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplate(templateId: string, createChatbotTemplateDTO: CreateChatbotTemplateDTO, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO> {
            return localVarFp.updateTemplate(templateId, createChatbotTemplateDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChatbotTemplateControllerApi - interface
 * @export
 * @interface ChatbotTemplateControllerApi
 */
export interface ChatbotTemplateControllerApiInterface {
    /**
     * 
     * @param {string} templateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotTemplateControllerApiInterface
     */
    cloneTemplate(templateId: string, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO>;

    /**
     * 
     * @param {CreateChatbotTemplateDTO} createChatbotTemplateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotTemplateControllerApiInterface
     */
    createTemplate(createChatbotTemplateDTO: CreateChatbotTemplateDTO, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO>;

    /**
     * 
     * @param {string} templateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotTemplateControllerApiInterface
     */
    deleteTemplate(templateId: string, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO>;

    /**
     * 
     * @param {string} templateId 
     * @param {CreateChatbotTemplateDTO} createChatbotTemplateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotTemplateControllerApiInterface
     */
    updateTemplate(templateId: string, createChatbotTemplateDTO: CreateChatbotTemplateDTO, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO>;

}

/**
 * ChatbotTemplateControllerApi - object-oriented interface
 * @export
 * @class ChatbotTemplateControllerApi
 * @extends {BaseAPI}
 */
export class ChatbotTemplateControllerApi extends BaseAPI implements ChatbotTemplateControllerApiInterface {
    /**
     * 
     * @param {string} templateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotTemplateControllerApi
     */
    public cloneTemplate(templateId: string, options?: RawAxiosRequestConfig) {
        return ChatbotTemplateControllerApiFp(this.configuration).cloneTemplate(templateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateChatbotTemplateDTO} createChatbotTemplateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotTemplateControllerApi
     */
    public createTemplate(createChatbotTemplateDTO: CreateChatbotTemplateDTO, options?: RawAxiosRequestConfig) {
        return ChatbotTemplateControllerApiFp(this.configuration).createTemplate(createChatbotTemplateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} templateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotTemplateControllerApi
     */
    public deleteTemplate(templateId: string, options?: RawAxiosRequestConfig) {
        return ChatbotTemplateControllerApiFp(this.configuration).deleteTemplate(templateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} templateId 
     * @param {CreateChatbotTemplateDTO} createChatbotTemplateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotTemplateControllerApi
     */
    public updateTemplate(templateId: string, createChatbotTemplateDTO: CreateChatbotTemplateDTO, options?: RawAxiosRequestConfig) {
        return ChatbotTemplateControllerApiFp(this.configuration).updateTemplate(templateId, createChatbotTemplateDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExerciseControllerApi - axios parameter creator
 * @export
 */
export const ExerciseControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateExcerciseDTO} createExcerciseDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExercise: async (createExcerciseDTO: CreateExcerciseDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createExcerciseDTO' is not null or undefined
            assertParamExists('createExercise', 'createExcerciseDTO', createExcerciseDTO)
            const localVarPath = `/exercises/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createExcerciseDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} exerciseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExcercise: async (exerciseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'exerciseId' is not null or undefined
            assertParamExists('deleteExcercise', 'exerciseId', exerciseId)
            const localVarPath = `/exercises/{exerciseId}`
                .replace(`{${"exerciseId"}}`, encodeURIComponent(String(exerciseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} therapySessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllExercisesOfTherapySession: async (therapySessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'therapySessionId' is not null or undefined
            assertParamExists('getAllExercisesOfTherapySession', 'therapySessionId', therapySessionId)
            const localVarPath = `/exercises/therapy-session/{therapySessionId}`
                .replace(`{${"therapySessionId"}}`, encodeURIComponent(String(therapySessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} exerciseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExerciseById: async (exerciseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'exerciseId' is not null or undefined
            assertParamExists('getExerciseById', 'exerciseId', exerciseId)
            const localVarPath = `/exercises/{exerciseId}`
                .replace(`{${"exerciseId"}}`, encodeURIComponent(String(exerciseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateExerciseDTO} updateExerciseDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExercise: async (updateExerciseDTO: UpdateExerciseDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateExerciseDTO' is not null or undefined
            assertParamExists('updateExercise', 'updateExerciseDTO', updateExerciseDTO)
            const localVarPath = `/exercises/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateExerciseDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExerciseControllerApi - functional programming interface
 * @export
 */
export const ExerciseControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExerciseControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateExcerciseDTO} createExcerciseDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createExercise(createExcerciseDTO: CreateExcerciseDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExerciseOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createExercise(createExcerciseDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExerciseControllerApi.createExercise']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} exerciseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExcercise(exerciseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteExcercise(exerciseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExerciseControllerApi.deleteExcercise']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} therapySessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllExercisesOfTherapySession(therapySessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExerciseOutputDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllExercisesOfTherapySession(therapySessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExerciseControllerApi.getAllExercisesOfTherapySession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} exerciseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExerciseById(exerciseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExerciseOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExerciseById(exerciseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExerciseControllerApi.getExerciseById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateExerciseDTO} updateExerciseDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateExercise(updateExerciseDTO: UpdateExerciseDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExerciseOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateExercise(updateExerciseDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExerciseControllerApi.updateExercise']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ExerciseControllerApi - factory interface
 * @export
 */
export const ExerciseControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExerciseControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateExcerciseDTO} createExcerciseDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExercise(createExcerciseDTO: CreateExcerciseDTO, options?: RawAxiosRequestConfig): AxiosPromise<ExerciseOutputDTO> {
            return localVarFp.createExercise(createExcerciseDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} exerciseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExcercise(exerciseId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteExcercise(exerciseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} therapySessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllExercisesOfTherapySession(therapySessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ExerciseOutputDTO>> {
            return localVarFp.getAllExercisesOfTherapySession(therapySessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} exerciseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExerciseById(exerciseId: string, options?: RawAxiosRequestConfig): AxiosPromise<ExerciseOutputDTO> {
            return localVarFp.getExerciseById(exerciseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateExerciseDTO} updateExerciseDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExercise(updateExerciseDTO: UpdateExerciseDTO, options?: RawAxiosRequestConfig): AxiosPromise<ExerciseOutputDTO> {
            return localVarFp.updateExercise(updateExerciseDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExerciseControllerApi - interface
 * @export
 * @interface ExerciseControllerApi
 */
export interface ExerciseControllerApiInterface {
    /**
     * 
     * @param {CreateExcerciseDTO} createExcerciseDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseControllerApiInterface
     */
    createExercise(createExcerciseDTO: CreateExcerciseDTO, options?: RawAxiosRequestConfig): AxiosPromise<ExerciseOutputDTO>;

    /**
     * 
     * @param {string} exerciseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseControllerApiInterface
     */
    deleteExcercise(exerciseId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} therapySessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseControllerApiInterface
     */
    getAllExercisesOfTherapySession(therapySessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ExerciseOutputDTO>>;

    /**
     * 
     * @param {string} exerciseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseControllerApiInterface
     */
    getExerciseById(exerciseId: string, options?: RawAxiosRequestConfig): AxiosPromise<ExerciseOutputDTO>;

    /**
     * 
     * @param {UpdateExerciseDTO} updateExerciseDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseControllerApiInterface
     */
    updateExercise(updateExerciseDTO: UpdateExerciseDTO, options?: RawAxiosRequestConfig): AxiosPromise<ExerciseOutputDTO>;

}

/**
 * ExerciseControllerApi - object-oriented interface
 * @export
 * @class ExerciseControllerApi
 * @extends {BaseAPI}
 */
export class ExerciseControllerApi extends BaseAPI implements ExerciseControllerApiInterface {
    /**
     * 
     * @param {CreateExcerciseDTO} createExcerciseDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseControllerApi
     */
    public createExercise(createExcerciseDTO: CreateExcerciseDTO, options?: RawAxiosRequestConfig) {
        return ExerciseControllerApiFp(this.configuration).createExercise(createExcerciseDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} exerciseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseControllerApi
     */
    public deleteExcercise(exerciseId: string, options?: RawAxiosRequestConfig) {
        return ExerciseControllerApiFp(this.configuration).deleteExcercise(exerciseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} therapySessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseControllerApi
     */
    public getAllExercisesOfTherapySession(therapySessionId: string, options?: RawAxiosRequestConfig) {
        return ExerciseControllerApiFp(this.configuration).getAllExercisesOfTherapySession(therapySessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} exerciseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseControllerApi
     */
    public getExerciseById(exerciseId: string, options?: RawAxiosRequestConfig) {
        return ExerciseControllerApiFp(this.configuration).getExerciseById(exerciseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateExerciseDTO} updateExerciseDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseControllerApi
     */
    public updateExercise(updateExerciseDTO: UpdateExerciseDTO, options?: RawAxiosRequestConfig) {
        return ExerciseControllerApiFp(this.configuration).updateExercise(updateExerciseDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExerciseFileControllerApi - axios parameter creator
 * @export
 */
export const ExerciseFileControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateExerciseFileDTO} metadata 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExerciseFile: async (metadata: CreateExerciseFileDTO, file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'metadata' is not null or undefined
            assertParamExists('createExerciseFile', 'metadata', metadata)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('createExerciseFile', 'file', file)
            const localVarPath = `/exercise-files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (metadata !== undefined) { 
                localVarFormParams.append('metadata', new Blob([JSON.stringify(metadata)], { type: "application/json", }));
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} exerciseFileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExcerciseFile: async (exerciseFileId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'exerciseFileId' is not null or undefined
            assertParamExists('deleteExcerciseFile', 'exerciseFileId', exerciseFileId)
            const localVarPath = `/exercise-files/{exerciseFileId}`
                .replace(`{${"exerciseFileId"}}`, encodeURIComponent(String(exerciseFileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} exerciseFileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadExerciseFile: async (exerciseFileId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'exerciseFileId' is not null or undefined
            assertParamExists('downloadExerciseFile', 'exerciseFileId', exerciseFileId)
            const localVarPath = `/exercise-files/{exerciseFileId}/download`
                .replace(`{${"exerciseFileId"}}`, encodeURIComponent(String(exerciseFileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateExerciseFileDTO} updateExerciseFileDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExerciseFile: async (updateExerciseFileDTO: UpdateExerciseFileDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateExerciseFileDTO' is not null or undefined
            assertParamExists('updateExerciseFile', 'updateExerciseFileDTO', updateExerciseFileDTO)
            const localVarPath = `/exercise-files/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateExerciseFileDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExerciseFileControllerApi - functional programming interface
 * @export
 */
export const ExerciseFileControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExerciseFileControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateExerciseFileDTO} metadata 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createExerciseFile(metadata: CreateExerciseFileDTO, file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createExerciseFile(metadata, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExerciseFileControllerApi.createExerciseFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} exerciseFileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExcerciseFile(exerciseFileId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteExcerciseFile(exerciseFileId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExerciseFileControllerApi.deleteExcerciseFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} exerciseFileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadExerciseFile(exerciseFileId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadExerciseFile(exerciseFileId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExerciseFileControllerApi.downloadExerciseFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateExerciseFileDTO} updateExerciseFileDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateExerciseFile(updateExerciseFileDTO: UpdateExerciseFileDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateExerciseFile(updateExerciseFileDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExerciseFileControllerApi.updateExerciseFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ExerciseFileControllerApi - factory interface
 * @export
 */
export const ExerciseFileControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExerciseFileControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateExerciseFileDTO} metadata 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExerciseFile(metadata: CreateExerciseFileDTO, file: File, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createExerciseFile(metadata, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} exerciseFileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExcerciseFile(exerciseFileId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteExcerciseFile(exerciseFileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} exerciseFileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadExerciseFile(exerciseFileId: string, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.downloadExerciseFile(exerciseFileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateExerciseFileDTO} updateExerciseFileDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExerciseFile(updateExerciseFileDTO: UpdateExerciseFileDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateExerciseFile(updateExerciseFileDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExerciseFileControllerApi - interface
 * @export
 * @interface ExerciseFileControllerApi
 */
export interface ExerciseFileControllerApiInterface {
    /**
     * 
     * @param {CreateExerciseFileDTO} metadata 
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseFileControllerApiInterface
     */
    createExerciseFile(metadata: CreateExerciseFileDTO, file: File, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} exerciseFileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseFileControllerApiInterface
     */
    deleteExcerciseFile(exerciseFileId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} exerciseFileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseFileControllerApiInterface
     */
    downloadExerciseFile(exerciseFileId: string, options?: RawAxiosRequestConfig): AxiosPromise<File>;

    /**
     * 
     * @param {UpdateExerciseFileDTO} updateExerciseFileDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseFileControllerApiInterface
     */
    updateExerciseFile(updateExerciseFileDTO: UpdateExerciseFileDTO, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * ExerciseFileControllerApi - object-oriented interface
 * @export
 * @class ExerciseFileControllerApi
 * @extends {BaseAPI}
 */
export class ExerciseFileControllerApi extends BaseAPI implements ExerciseFileControllerApiInterface {
    /**
     * 
     * @param {CreateExerciseFileDTO} metadata 
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseFileControllerApi
     */
    public createExerciseFile(metadata: CreateExerciseFileDTO, file: File, options?: RawAxiosRequestConfig) {
        return ExerciseFileControllerApiFp(this.configuration).createExerciseFile(metadata, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} exerciseFileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseFileControllerApi
     */
    public deleteExcerciseFile(exerciseFileId: string, options?: RawAxiosRequestConfig) {
        return ExerciseFileControllerApiFp(this.configuration).deleteExcerciseFile(exerciseFileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} exerciseFileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseFileControllerApi
     */
    public downloadExerciseFile(exerciseFileId: string, options?: RawAxiosRequestConfig) {
        return ExerciseFileControllerApiFp(this.configuration).downloadExerciseFile(exerciseFileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateExerciseFileDTO} updateExerciseFileDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseFileControllerApi
     */
    public updateExerciseFile(updateExerciseFileDTO: UpdateExerciseFileDTO, options?: RawAxiosRequestConfig) {
        return ExerciseFileControllerApiFp(this.configuration).updateExerciseFile(updateExerciseFileDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExerciseTextControllerApi - axios parameter creator
 * @export
 */
export const ExerciseTextControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateExerciseTextDTO} createExerciseTextDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExerciseText: async (createExerciseTextDTO: CreateExerciseTextDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createExerciseTextDTO' is not null or undefined
            assertParamExists('createExerciseText', 'createExerciseTextDTO', createExerciseTextDTO)
            const localVarPath = `/exercise-texts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createExerciseTextDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} exerciseTextId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExerciseText: async (exerciseTextId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'exerciseTextId' is not null or undefined
            assertParamExists('deleteExerciseText', 'exerciseTextId', exerciseTextId)
            const localVarPath = `/exercise-texts/{exerciseTextId}`
                .replace(`{${"exerciseTextId"}}`, encodeURIComponent(String(exerciseTextId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateExerciseTextDTO} updateExerciseTextDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExerciseText: async (updateExerciseTextDTO: UpdateExerciseTextDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateExerciseTextDTO' is not null or undefined
            assertParamExists('updateExerciseText', 'updateExerciseTextDTO', updateExerciseTextDTO)
            const localVarPath = `/exercise-texts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateExerciseTextDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExerciseTextControllerApi - functional programming interface
 * @export
 */
export const ExerciseTextControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExerciseTextControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateExerciseTextDTO} createExerciseTextDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createExerciseText(createExerciseTextDTO: CreateExerciseTextDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createExerciseText(createExerciseTextDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExerciseTextControllerApi.createExerciseText']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} exerciseTextId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExerciseText(exerciseTextId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteExerciseText(exerciseTextId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExerciseTextControllerApi.deleteExerciseText']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateExerciseTextDTO} updateExerciseTextDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateExerciseText(updateExerciseTextDTO: UpdateExerciseTextDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateExerciseText(updateExerciseTextDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExerciseTextControllerApi.updateExerciseText']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ExerciseTextControllerApi - factory interface
 * @export
 */
export const ExerciseTextControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExerciseTextControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateExerciseTextDTO} createExerciseTextDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExerciseText(createExerciseTextDTO: CreateExerciseTextDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createExerciseText(createExerciseTextDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} exerciseTextId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExerciseText(exerciseTextId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteExerciseText(exerciseTextId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateExerciseTextDTO} updateExerciseTextDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExerciseText(updateExerciseTextDTO: UpdateExerciseTextDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateExerciseText(updateExerciseTextDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExerciseTextControllerApi - interface
 * @export
 * @interface ExerciseTextControllerApi
 */
export interface ExerciseTextControllerApiInterface {
    /**
     * 
     * @param {CreateExerciseTextDTO} createExerciseTextDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseTextControllerApiInterface
     */
    createExerciseText(createExerciseTextDTO: CreateExerciseTextDTO, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} exerciseTextId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseTextControllerApiInterface
     */
    deleteExerciseText(exerciseTextId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {UpdateExerciseTextDTO} updateExerciseTextDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseTextControllerApiInterface
     */
    updateExerciseText(updateExerciseTextDTO: UpdateExerciseTextDTO, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * ExerciseTextControllerApi - object-oriented interface
 * @export
 * @class ExerciseTextControllerApi
 * @extends {BaseAPI}
 */
export class ExerciseTextControllerApi extends BaseAPI implements ExerciseTextControllerApiInterface {
    /**
     * 
     * @param {CreateExerciseTextDTO} createExerciseTextDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseTextControllerApi
     */
    public createExerciseText(createExerciseTextDTO: CreateExerciseTextDTO, options?: RawAxiosRequestConfig) {
        return ExerciseTextControllerApiFp(this.configuration).createExerciseText(createExerciseTextDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} exerciseTextId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseTextControllerApi
     */
    public deleteExerciseText(exerciseTextId: string, options?: RawAxiosRequestConfig) {
        return ExerciseTextControllerApiFp(this.configuration).deleteExerciseText(exerciseTextId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateExerciseTextDTO} updateExerciseTextDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseTextControllerApi
     */
    public updateExerciseText(updateExerciseTextDTO: UpdateExerciseTextDTO, options?: RawAxiosRequestConfig) {
        return ExerciseTextControllerApiFp(this.configuration).updateExerciseText(updateExerciseTextDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PatientControllerApi - axios parameter creator
 * @export
 */
export const PatientControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreatePatientDTO} createPatientDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPatientForTherapist: async (createPatientDTO: CreatePatientDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPatientDTO' is not null or undefined
            assertParamExists('createPatientForTherapist', 'createPatientDTO', createPatientDTO)
            const localVarPath = `/patients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPatientDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePatient: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePatient', 'id', id)
            const localVarPath = `/patients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPatientsOfTherapist: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/patients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PatientControllerApi - functional programming interface
 * @export
 */
export const PatientControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PatientControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreatePatientDTO} createPatientDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPatientForTherapist(createPatientDTO: CreatePatientDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatientOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPatientForTherapist(createPatientDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientControllerApi.createPatientForTherapist']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePatient(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePatient(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientControllerApi.deletePatient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPatientsOfTherapist(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PatientOutputDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPatientsOfTherapist(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientControllerApi.getPatientsOfTherapist']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PatientControllerApi - factory interface
 * @export
 */
export const PatientControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PatientControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreatePatientDTO} createPatientDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPatientForTherapist(createPatientDTO: CreatePatientDTO, options?: RawAxiosRequestConfig): AxiosPromise<PatientOutputDTO> {
            return localVarFp.createPatientForTherapist(createPatientDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePatient(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePatient(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPatientsOfTherapist(options?: RawAxiosRequestConfig): AxiosPromise<Array<PatientOutputDTO>> {
            return localVarFp.getPatientsOfTherapist(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PatientControllerApi - interface
 * @export
 * @interface PatientControllerApi
 */
export interface PatientControllerApiInterface {
    /**
     * 
     * @param {CreatePatientDTO} createPatientDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientControllerApiInterface
     */
    createPatientForTherapist(createPatientDTO: CreatePatientDTO, options?: RawAxiosRequestConfig): AxiosPromise<PatientOutputDTO>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientControllerApiInterface
     */
    deletePatient(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientControllerApiInterface
     */
    getPatientsOfTherapist(options?: RawAxiosRequestConfig): AxiosPromise<Array<PatientOutputDTO>>;

}

/**
 * PatientControllerApi - object-oriented interface
 * @export
 * @class PatientControllerApi
 * @extends {BaseAPI}
 */
export class PatientControllerApi extends BaseAPI implements PatientControllerApiInterface {
    /**
     * 
     * @param {CreatePatientDTO} createPatientDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientControllerApi
     */
    public createPatientForTherapist(createPatientDTO: CreatePatientDTO, options?: RawAxiosRequestConfig) {
        return PatientControllerApiFp(this.configuration).createPatientForTherapist(createPatientDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientControllerApi
     */
    public deletePatient(id: string, options?: RawAxiosRequestConfig) {
        return PatientControllerApiFp(this.configuration).deletePatient(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientControllerApi
     */
    public getPatientsOfTherapist(options?: RawAxiosRequestConfig) {
        return PatientControllerApiFp(this.configuration).getPatientsOfTherapist(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PatientDocumentControllerApi - axios parameter creator
 * @export
 */
export const PatientDocumentControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} patientId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPatientDocument: async (patientId: string, file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientId' is not null or undefined
            assertParamExists('createPatientDocument', 'patientId', patientId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('createPatientDocument', 'file', file)
            const localVarPath = `/patient-documents/{patientId}`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} patientDocumentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile: async (patientDocumentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientDocumentId' is not null or undefined
            assertParamExists('deleteFile', 'patientDocumentId', patientDocumentId)
            const localVarPath = `/patient-documents/{patientDocumentId}`
                .replace(`{${"patientDocumentId"}}`, encodeURIComponent(String(patientDocumentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} patientDocumentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFile: async (patientDocumentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientDocumentId' is not null or undefined
            assertParamExists('downloadFile', 'patientDocumentId', patientDocumentId)
            const localVarPath = `/patient-documents/{patientDocumentId}/download`
                .replace(`{${"patientDocumentId"}}`, encodeURIComponent(String(patientDocumentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentsOfPatient: async (patientId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientId' is not null or undefined
            assertParamExists('getDocumentsOfPatient', 'patientId', patientId)
            const localVarPath = `/patient-documents/{patientId}`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PatientDocumentControllerApi - functional programming interface
 * @export
 */
export const PatientDocumentControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PatientDocumentControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} patientId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPatientDocument(patientId: string, file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPatientDocument(patientId, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientDocumentControllerApi.createPatientDocument']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} patientDocumentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFile(patientDocumentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFile(patientDocumentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientDocumentControllerApi.deleteFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} patientDocumentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadFile(patientDocumentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadFile(patientDocumentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientDocumentControllerApi.downloadFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocumentsOfPatient(patientId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PatientDocumentOutputDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocumentsOfPatient(patientId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientDocumentControllerApi.getDocumentsOfPatient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PatientDocumentControllerApi - factory interface
 * @export
 */
export const PatientDocumentControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PatientDocumentControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} patientId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPatientDocument(patientId: string, file: File, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createPatientDocument(patientId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} patientDocumentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile(patientDocumentId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteFile(patientDocumentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} patientDocumentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFile(patientDocumentId: string, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.downloadFile(patientDocumentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentsOfPatient(patientId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<PatientDocumentOutputDTO>> {
            return localVarFp.getDocumentsOfPatient(patientId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PatientDocumentControllerApi - interface
 * @export
 * @interface PatientDocumentControllerApi
 */
export interface PatientDocumentControllerApiInterface {
    /**
     * 
     * @param {string} patientId 
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientDocumentControllerApiInterface
     */
    createPatientDocument(patientId: string, file: File, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} patientDocumentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientDocumentControllerApiInterface
     */
    deleteFile(patientDocumentId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} patientDocumentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientDocumentControllerApiInterface
     */
    downloadFile(patientDocumentId: string, options?: RawAxiosRequestConfig): AxiosPromise<File>;

    /**
     * 
     * @param {string} patientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientDocumentControllerApiInterface
     */
    getDocumentsOfPatient(patientId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<PatientDocumentOutputDTO>>;

}

/**
 * PatientDocumentControllerApi - object-oriented interface
 * @export
 * @class PatientDocumentControllerApi
 * @extends {BaseAPI}
 */
export class PatientDocumentControllerApi extends BaseAPI implements PatientDocumentControllerApiInterface {
    /**
     * 
     * @param {string} patientId 
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientDocumentControllerApi
     */
    public createPatientDocument(patientId: string, file: File, options?: RawAxiosRequestConfig) {
        return PatientDocumentControllerApiFp(this.configuration).createPatientDocument(patientId, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} patientDocumentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientDocumentControllerApi
     */
    public deleteFile(patientDocumentId: string, options?: RawAxiosRequestConfig) {
        return PatientDocumentControllerApiFp(this.configuration).deleteFile(patientDocumentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} patientDocumentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientDocumentControllerApi
     */
    public downloadFile(patientDocumentId: string, options?: RawAxiosRequestConfig) {
        return PatientDocumentControllerApiFp(this.configuration).downloadFile(patientDocumentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} patientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientDocumentControllerApi
     */
    public getDocumentsOfPatient(patientId: string, options?: RawAxiosRequestConfig) {
        return PatientDocumentControllerApiFp(this.configuration).getDocumentsOfPatient(patientId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PatientTestControllerApi - axios parameter creator
 * @export
 */
export const PatientTestControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateGAD7TestDTO} createGAD7TestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTest: async (createGAD7TestDTO: CreateGAD7TestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createGAD7TestDTO' is not null or undefined
            assertParamExists('createTest', 'createGAD7TestDTO', createGAD7TestDTO)
            const localVarPath = `/tests/gad7`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGAD7TestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestById: async (testId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testId' is not null or undefined
            assertParamExists('getTestById', 'testId', testId)
            const localVarPath = `/tests/gad7/{testId}`
                .replace(`{${"testId"}}`, encodeURIComponent(String(testId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestsByTherapySession: async (sessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('getTestsByTherapySession', 'sessionId', sessionId)
            const localVarPath = `/tests/gad7/session/{sessionId}`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestsForPatient: async (patientId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientId' is not null or undefined
            assertParamExists('getTestsForPatient', 'patientId', patientId)
            const localVarPath = `/tests/gad7/patient/{patientId}`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PatientTestControllerApi - functional programming interface
 * @export
 */
export const PatientTestControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PatientTestControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateGAD7TestDTO} createGAD7TestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTest(createGAD7TestDTO: CreateGAD7TestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GAD7TestOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTest(createGAD7TestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientTestControllerApi.createTest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTestById(testId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GAD7TestOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTestById(testId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientTestControllerApi.getTestById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTestsByTherapySession(sessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GAD7TestOutputDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTestsByTherapySession(sessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientTestControllerApi.getTestsByTherapySession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTestsForPatient(patientId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GAD7TestOutputDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTestsForPatient(patientId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientTestControllerApi.getTestsForPatient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PatientTestControllerApi - factory interface
 * @export
 */
export const PatientTestControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PatientTestControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateGAD7TestDTO} createGAD7TestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTest(createGAD7TestDTO: CreateGAD7TestDTO, options?: RawAxiosRequestConfig): AxiosPromise<GAD7TestOutputDTO> {
            return localVarFp.createTest(createGAD7TestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestById(testId: string, options?: RawAxiosRequestConfig): AxiosPromise<GAD7TestOutputDTO> {
            return localVarFp.getTestById(testId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestsByTherapySession(sessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GAD7TestOutputDTO>> {
            return localVarFp.getTestsByTherapySession(sessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestsForPatient(patientId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GAD7TestOutputDTO>> {
            return localVarFp.getTestsForPatient(patientId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PatientTestControllerApi - interface
 * @export
 * @interface PatientTestControllerApi
 */
export interface PatientTestControllerApiInterface {
    /**
     * 
     * @param {CreateGAD7TestDTO} createGAD7TestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientTestControllerApiInterface
     */
    createTest(createGAD7TestDTO: CreateGAD7TestDTO, options?: RawAxiosRequestConfig): AxiosPromise<GAD7TestOutputDTO>;

    /**
     * 
     * @param {string} testId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientTestControllerApiInterface
     */
    getTestById(testId: string, options?: RawAxiosRequestConfig): AxiosPromise<GAD7TestOutputDTO>;

    /**
     * 
     * @param {string} sessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientTestControllerApiInterface
     */
    getTestsByTherapySession(sessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GAD7TestOutputDTO>>;

    /**
     * 
     * @param {string} patientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientTestControllerApiInterface
     */
    getTestsForPatient(patientId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GAD7TestOutputDTO>>;

}

/**
 * PatientTestControllerApi - object-oriented interface
 * @export
 * @class PatientTestControllerApi
 * @extends {BaseAPI}
 */
export class PatientTestControllerApi extends BaseAPI implements PatientTestControllerApiInterface {
    /**
     * 
     * @param {CreateGAD7TestDTO} createGAD7TestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientTestControllerApi
     */
    public createTest(createGAD7TestDTO: CreateGAD7TestDTO, options?: RawAxiosRequestConfig) {
        return PatientTestControllerApiFp(this.configuration).createTest(createGAD7TestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} testId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientTestControllerApi
     */
    public getTestById(testId: string, options?: RawAxiosRequestConfig) {
        return PatientTestControllerApiFp(this.configuration).getTestById(testId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} sessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientTestControllerApi
     */
    public getTestsByTherapySession(sessionId: string, options?: RawAxiosRequestConfig) {
        return PatientTestControllerApiFp(this.configuration).getTestsByTherapySession(sessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} patientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientTestControllerApi
     */
    public getTestsForPatient(patientId: string, options?: RawAxiosRequestConfig) {
        return PatientTestControllerApiFp(this.configuration).getTestsForPatient(patientId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TherapistControllerApi - axios parameter creator
 * @export
 */
export const TherapistControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateTherapistDTO} createTherapistDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTherapist: async (createTherapistDTO: CreateTherapistDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTherapistDTO' is not null or undefined
            assertParamExists('createTherapist', 'createTherapistDTO', createTherapistDTO)
            const localVarPath = `/therapists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTherapistDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentlyLoggedInTherapist: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/therapists/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginTherapistDTO} loginTherapistDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginTherapist: async (loginTherapistDTO: LoginTherapistDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginTherapistDTO' is not null or undefined
            assertParamExists('loginTherapist', 'loginTherapistDTO', loginTherapistDTO)
            const localVarPath = `/therapists/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginTherapistDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutTherapist: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/therapists/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TherapistControllerApi - functional programming interface
 * @export
 */
export const TherapistControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TherapistControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateTherapistDTO} createTherapistDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTherapist(createTherapistDTO: CreateTherapistDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TherapistOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTherapist(createTherapistDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TherapistControllerApi.createTherapist']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentlyLoggedInTherapist(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TherapistOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentlyLoggedInTherapist(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TherapistControllerApi.getCurrentlyLoggedInTherapist']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LoginTherapistDTO} loginTherapistDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginTherapist(loginTherapistDTO: LoginTherapistDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TherapistOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginTherapist(loginTherapistDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TherapistControllerApi.loginTherapist']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logoutTherapist(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logoutTherapist(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TherapistControllerApi.logoutTherapist']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TherapistControllerApi - factory interface
 * @export
 */
export const TherapistControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TherapistControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateTherapistDTO} createTherapistDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTherapist(createTherapistDTO: CreateTherapistDTO, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO> {
            return localVarFp.createTherapist(createTherapistDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentlyLoggedInTherapist(options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO> {
            return localVarFp.getCurrentlyLoggedInTherapist(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginTherapistDTO} loginTherapistDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginTherapist(loginTherapistDTO: LoginTherapistDTO, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO> {
            return localVarFp.loginTherapist(loginTherapistDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutTherapist(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.logoutTherapist(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TherapistControllerApi - interface
 * @export
 * @interface TherapistControllerApi
 */
export interface TherapistControllerApiInterface {
    /**
     * 
     * @param {CreateTherapistDTO} createTherapistDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapistControllerApiInterface
     */
    createTherapist(createTherapistDTO: CreateTherapistDTO, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapistControllerApiInterface
     */
    getCurrentlyLoggedInTherapist(options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO>;

    /**
     * 
     * @param {LoginTherapistDTO} loginTherapistDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapistControllerApiInterface
     */
    loginTherapist(loginTherapistDTO: LoginTherapistDTO, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapistControllerApiInterface
     */
    logoutTherapist(options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * TherapistControllerApi - object-oriented interface
 * @export
 * @class TherapistControllerApi
 * @extends {BaseAPI}
 */
export class TherapistControllerApi extends BaseAPI implements TherapistControllerApiInterface {
    /**
     * 
     * @param {CreateTherapistDTO} createTherapistDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapistControllerApi
     */
    public createTherapist(createTherapistDTO: CreateTherapistDTO, options?: RawAxiosRequestConfig) {
        return TherapistControllerApiFp(this.configuration).createTherapist(createTherapistDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapistControllerApi
     */
    public getCurrentlyLoggedInTherapist(options?: RawAxiosRequestConfig) {
        return TherapistControllerApiFp(this.configuration).getCurrentlyLoggedInTherapist(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginTherapistDTO} loginTherapistDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapistControllerApi
     */
    public loginTherapist(loginTherapistDTO: LoginTherapistDTO, options?: RawAxiosRequestConfig) {
        return TherapistControllerApiFp(this.configuration).loginTherapist(loginTherapistDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapistControllerApi
     */
    public logoutTherapist(options?: RawAxiosRequestConfig) {
        return TherapistControllerApiFp(this.configuration).logoutTherapist(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TherapySessionControllerApi - axios parameter creator
 * @export
 */
export const TherapySessionControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateTherapySessionDTO} createTherapySessionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession: async (createTherapySessionDTO: CreateTherapySessionDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTherapySessionDTO' is not null or undefined
            assertParamExists('createSession', 'createTherapySessionDTO', createTherapySessionDTO)
            const localVarPath = `/therapy-sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTherapySessionDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} therapySessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTherapySessionById: async (therapySessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'therapySessionId' is not null or undefined
            assertParamExists('deleteTherapySessionById', 'therapySessionId', therapySessionId)
            const localVarPath = `/therapy-sessions/{therapySessionId}`
                .replace(`{${"therapySessionId"}}`, encodeURIComponent(String(therapySessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} therapySessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTherapySessionById: async (therapySessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'therapySessionId' is not null or undefined
            assertParamExists('getTherapySessionById', 'therapySessionId', therapySessionId)
            const localVarPath = `/therapy-sessions/{therapySessionId}`
                .replace(`{${"therapySessionId"}}`, encodeURIComponent(String(therapySessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTherapySessionsOfPatient: async (patientId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientId' is not null or undefined
            assertParamExists('getTherapySessionsOfPatient', 'patientId', patientId)
            const localVarPath = `/therapy-sessions/patients/{patientId}`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TherapySessionControllerApi - functional programming interface
 * @export
 */
export const TherapySessionControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TherapySessionControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateTherapySessionDTO} createTherapySessionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSession(createTherapySessionDTO: CreateTherapySessionDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TherapySessionOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSession(createTherapySessionDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TherapySessionControllerApi.createSession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} therapySessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTherapySessionById(therapySessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTherapySessionById(therapySessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TherapySessionControllerApi.deleteTherapySessionById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} therapySessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTherapySessionById(therapySessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TherapySessionOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTherapySessionById(therapySessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TherapySessionControllerApi.getTherapySessionById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTherapySessionsOfPatient(patientId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TherapySessionOutputDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTherapySessionsOfPatient(patientId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TherapySessionControllerApi.getTherapySessionsOfPatient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TherapySessionControllerApi - factory interface
 * @export
 */
export const TherapySessionControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TherapySessionControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateTherapySessionDTO} createTherapySessionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession(createTherapySessionDTO: CreateTherapySessionDTO, options?: RawAxiosRequestConfig): AxiosPromise<TherapySessionOutputDTO> {
            return localVarFp.createSession(createTherapySessionDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} therapySessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTherapySessionById(therapySessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTherapySessionById(therapySessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} therapySessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTherapySessionById(therapySessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<TherapySessionOutputDTO> {
            return localVarFp.getTherapySessionById(therapySessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTherapySessionsOfPatient(patientId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<TherapySessionOutputDTO>> {
            return localVarFp.getTherapySessionsOfPatient(patientId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TherapySessionControllerApi - interface
 * @export
 * @interface TherapySessionControllerApi
 */
export interface TherapySessionControllerApiInterface {
    /**
     * 
     * @param {CreateTherapySessionDTO} createTherapySessionDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapySessionControllerApiInterface
     */
    createSession(createTherapySessionDTO: CreateTherapySessionDTO, options?: RawAxiosRequestConfig): AxiosPromise<TherapySessionOutputDTO>;

    /**
     * 
     * @param {string} therapySessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapySessionControllerApiInterface
     */
    deleteTherapySessionById(therapySessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} therapySessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapySessionControllerApiInterface
     */
    getTherapySessionById(therapySessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<TherapySessionOutputDTO>;

    /**
     * 
     * @param {string} patientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapySessionControllerApiInterface
     */
    getTherapySessionsOfPatient(patientId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<TherapySessionOutputDTO>>;

}

/**
 * TherapySessionControllerApi - object-oriented interface
 * @export
 * @class TherapySessionControllerApi
 * @extends {BaseAPI}
 */
export class TherapySessionControllerApi extends BaseAPI implements TherapySessionControllerApiInterface {
    /**
     * 
     * @param {CreateTherapySessionDTO} createTherapySessionDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapySessionControllerApi
     */
    public createSession(createTherapySessionDTO: CreateTherapySessionDTO, options?: RawAxiosRequestConfig) {
        return TherapySessionControllerApiFp(this.configuration).createSession(createTherapySessionDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} therapySessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapySessionControllerApi
     */
    public deleteTherapySessionById(therapySessionId: string, options?: RawAxiosRequestConfig) {
        return TherapySessionControllerApiFp(this.configuration).deleteTherapySessionById(therapySessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} therapySessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapySessionControllerApi
     */
    public getTherapySessionById(therapySessionId: string, options?: RawAxiosRequestConfig) {
        return TherapySessionControllerApiFp(this.configuration).getTherapySessionById(therapySessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} patientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapySessionControllerApi
     */
    public getTherapySessionsOfPatient(patientId: string, options?: RawAxiosRequestConfig) {
        return TherapySessionControllerApiFp(this.configuration).getTherapySessionsOfPatient(patientId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TherapySessionNoteControllerApi - axios parameter creator
 * @export
 */
export const TherapySessionNoteControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateTherapySessionNoteDTO} createTherapySessionNoteDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTherapySessionNote: async (createTherapySessionNoteDTO: CreateTherapySessionNoteDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTherapySessionNoteDTO' is not null or undefined
            assertParamExists('createTherapySessionNote', 'createTherapySessionNoteDTO', createTherapySessionNoteDTO)
            const localVarPath = `/therapy-session-notes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTherapySessionNoteDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} therapySessionNoteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTherapySessionById1: async (therapySessionNoteId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'therapySessionNoteId' is not null or undefined
            assertParamExists('deleteTherapySessionById1', 'therapySessionNoteId', therapySessionNoteId)
            const localVarPath = `/therapy-session-notes/{therapySessionNoteId}`
                .replace(`{${"therapySessionNoteId"}}`, encodeURIComponent(String(therapySessionNoteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} therapySessionNoteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTherapySessionNoteById: async (therapySessionNoteId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'therapySessionNoteId' is not null or undefined
            assertParamExists('getTherapySessionNoteById', 'therapySessionNoteId', therapySessionNoteId)
            const localVarPath = `/therapy-session-notes/{therapySessionNoteId}`
                .replace(`{${"therapySessionNoteId"}}`, encodeURIComponent(String(therapySessionNoteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateTherapySessionNoteDTO} updateTherapySessionNoteDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTherapySessionNote: async (updateTherapySessionNoteDTO: UpdateTherapySessionNoteDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateTherapySessionNoteDTO' is not null or undefined
            assertParamExists('updateTherapySessionNote', 'updateTherapySessionNoteDTO', updateTherapySessionNoteDTO)
            const localVarPath = `/therapy-session-notes/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTherapySessionNoteDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TherapySessionNoteControllerApi - functional programming interface
 * @export
 */
export const TherapySessionNoteControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TherapySessionNoteControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateTherapySessionNoteDTO} createTherapySessionNoteDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTherapySessionNote(createTherapySessionNoteDTO: CreateTherapySessionNoteDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TherapySessionNoteOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTherapySessionNote(createTherapySessionNoteDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TherapySessionNoteControllerApi.createTherapySessionNote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} therapySessionNoteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTherapySessionById1(therapySessionNoteId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTherapySessionById1(therapySessionNoteId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TherapySessionNoteControllerApi.deleteTherapySessionById1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} therapySessionNoteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTherapySessionNoteById(therapySessionNoteId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TherapySessionNoteOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTherapySessionNoteById(therapySessionNoteId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TherapySessionNoteControllerApi.getTherapySessionNoteById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateTherapySessionNoteDTO} updateTherapySessionNoteDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTherapySessionNote(updateTherapySessionNoteDTO: UpdateTherapySessionNoteDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TherapySessionNoteOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTherapySessionNote(updateTherapySessionNoteDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TherapySessionNoteControllerApi.updateTherapySessionNote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TherapySessionNoteControllerApi - factory interface
 * @export
 */
export const TherapySessionNoteControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TherapySessionNoteControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateTherapySessionNoteDTO} createTherapySessionNoteDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTherapySessionNote(createTherapySessionNoteDTO: CreateTherapySessionNoteDTO, options?: RawAxiosRequestConfig): AxiosPromise<TherapySessionNoteOutputDTO> {
            return localVarFp.createTherapySessionNote(createTherapySessionNoteDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} therapySessionNoteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTherapySessionById1(therapySessionNoteId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTherapySessionById1(therapySessionNoteId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} therapySessionNoteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTherapySessionNoteById(therapySessionNoteId: string, options?: RawAxiosRequestConfig): AxiosPromise<TherapySessionNoteOutputDTO> {
            return localVarFp.getTherapySessionNoteById(therapySessionNoteId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateTherapySessionNoteDTO} updateTherapySessionNoteDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTherapySessionNote(updateTherapySessionNoteDTO: UpdateTherapySessionNoteDTO, options?: RawAxiosRequestConfig): AxiosPromise<TherapySessionNoteOutputDTO> {
            return localVarFp.updateTherapySessionNote(updateTherapySessionNoteDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TherapySessionNoteControllerApi - interface
 * @export
 * @interface TherapySessionNoteControllerApi
 */
export interface TherapySessionNoteControllerApiInterface {
    /**
     * 
     * @param {CreateTherapySessionNoteDTO} createTherapySessionNoteDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapySessionNoteControllerApiInterface
     */
    createTherapySessionNote(createTherapySessionNoteDTO: CreateTherapySessionNoteDTO, options?: RawAxiosRequestConfig): AxiosPromise<TherapySessionNoteOutputDTO>;

    /**
     * 
     * @param {string} therapySessionNoteId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapySessionNoteControllerApiInterface
     */
    deleteTherapySessionById1(therapySessionNoteId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} therapySessionNoteId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapySessionNoteControllerApiInterface
     */
    getTherapySessionNoteById(therapySessionNoteId: string, options?: RawAxiosRequestConfig): AxiosPromise<TherapySessionNoteOutputDTO>;

    /**
     * 
     * @param {UpdateTherapySessionNoteDTO} updateTherapySessionNoteDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapySessionNoteControllerApiInterface
     */
    updateTherapySessionNote(updateTherapySessionNoteDTO: UpdateTherapySessionNoteDTO, options?: RawAxiosRequestConfig): AxiosPromise<TherapySessionNoteOutputDTO>;

}

/**
 * TherapySessionNoteControllerApi - object-oriented interface
 * @export
 * @class TherapySessionNoteControllerApi
 * @extends {BaseAPI}
 */
export class TherapySessionNoteControllerApi extends BaseAPI implements TherapySessionNoteControllerApiInterface {
    /**
     * 
     * @param {CreateTherapySessionNoteDTO} createTherapySessionNoteDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapySessionNoteControllerApi
     */
    public createTherapySessionNote(createTherapySessionNoteDTO: CreateTherapySessionNoteDTO, options?: RawAxiosRequestConfig) {
        return TherapySessionNoteControllerApiFp(this.configuration).createTherapySessionNote(createTherapySessionNoteDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} therapySessionNoteId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapySessionNoteControllerApi
     */
    public deleteTherapySessionById1(therapySessionNoteId: string, options?: RawAxiosRequestConfig) {
        return TherapySessionNoteControllerApiFp(this.configuration).deleteTherapySessionById1(therapySessionNoteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} therapySessionNoteId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapySessionNoteControllerApi
     */
    public getTherapySessionNoteById(therapySessionNoteId: string, options?: RawAxiosRequestConfig) {
        return TherapySessionNoteControllerApiFp(this.configuration).getTherapySessionNoteById(therapySessionNoteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateTherapySessionNoteDTO} updateTherapySessionNoteDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapySessionNoteControllerApi
     */
    public updateTherapySessionNote(updateTherapySessionNoteDTO: UpdateTherapySessionNoteDTO, options?: RawAxiosRequestConfig) {
        return TherapySessionNoteControllerApiFp(this.configuration).updateTherapySessionNote(updateTherapySessionNoteDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



