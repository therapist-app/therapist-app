/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ChatCompletionResponseDTO
 */
export interface ChatCompletionResponseDTO {
    /**
     * 
     * @type {string}
     * @memberof ChatCompletionResponseDTO
     */
    'content'?: string;
}
/**
 * 
 * @export
 * @interface ChatCompletionWithConfigRequestDTO
 */
export interface ChatCompletionWithConfigRequestDTO {
    /**
     * 
     * @type {ChatbotConfigDTO}
     * @memberof ChatCompletionWithConfigRequestDTO
     */
    'config'?: ChatbotConfigDTO;
    /**
     * 
     * @type {Array<ChatMessageDTO>}
     * @memberof ChatCompletionWithConfigRequestDTO
     */
    'history'?: Array<ChatMessageDTO>;
    /**
     * 
     * @type {string}
     * @memberof ChatCompletionWithConfigRequestDTO
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ChatMessageDTO
 */
export interface ChatMessageDTO {
    /**
     * 
     * @type {string}
     * @memberof ChatMessageDTO
     */
    'role'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatMessageDTO
     */
    'content'?: string;
}
/**
 * 
 * @export
 * @interface ChatbotConfigDTO
 */
export interface ChatbotConfigDTO {
    /**
     * 
     * @type {string}
     * @memberof ChatbotConfigDTO
     */
    'chatbotRole'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotConfigDTO
     */
    'chatbotTone'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotConfigDTO
     */
    'chatbotLanguage'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotConfigDTO
     */
    'chatbotVoice'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotConfigDTO
     */
    'chatbotGender'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotConfigDTO
     */
    'preConfiguredExercise'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotConfigDTO
     */
    'additionalExercise'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotConfigDTO
     */
    'welcomeMessage'?: string;
}
/**
 * 
 * @export
 * @interface ChatbotTemplateOutputDTO
 */
export interface ChatbotTemplateOutputDTO {
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'chatbotName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'chatbotModel'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'chatbotIcon'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'chatbotLanguage'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'chatbotRole'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'chatbotTone'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'welcomeMessage'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'chatbotVoice'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'chatbotGender'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'preConfiguredExercise'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'additionalExercise'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'animation'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'chatbotInputPlaceholder'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'workspaceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotTemplateOutputDTO
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface CreateChatbotTemplateDTO
 */
export interface CreateChatbotTemplateDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateChatbotTemplateDTO
     */
    'chatbotName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChatbotTemplateDTO
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChatbotTemplateDTO
     */
    'chatbotModel'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChatbotTemplateDTO
     */
    'chatbotIcon'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChatbotTemplateDTO
     */
    'chatbotLanguage'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChatbotTemplateDTO
     */
    'chatbotRole'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChatbotTemplateDTO
     */
    'chatbotTone'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChatbotTemplateDTO
     */
    'welcomeMessage'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChatbotTemplateDTO
     */
    'chatbotVoice'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChatbotTemplateDTO
     */
    'chatbotGender'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChatbotTemplateDTO
     */
    'preConfiguredExercise'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChatbotTemplateDTO
     */
    'additionalExercise'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChatbotTemplateDTO
     */
    'animation'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChatbotTemplateDTO
     */
    'chatbotInputPlaceholder'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChatbotTemplateDTO
     */
    'workspaceId'?: string;
}
/**
 * 
 * @export
 * @interface CreateExerciseComponentDTO
 */
export interface CreateExerciseComponentDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateExerciseComponentDTO
     */
    'exerciseId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateExerciseComponentDTO
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateExerciseComponentDTO
     */
    'exerciseComponentType'?: CreateExerciseComponentDTOExerciseComponentTypeEnum;
}

export const CreateExerciseComponentDTOExerciseComponentTypeEnum = {
    Text: 'TEXT',
    InputField: 'INPUT_FIELD',
    File: 'FILE',
    Image: 'IMAGE',
    YoutubeVideo: 'YOUTUBE_VIDEO'
} as const;

export type CreateExerciseComponentDTOExerciseComponentTypeEnum = typeof CreateExerciseComponentDTOExerciseComponentTypeEnum[keyof typeof CreateExerciseComponentDTOExerciseComponentTypeEnum];

/**
 * 
 * @export
 * @interface CreateExerciseDTO
 */
export interface CreateExerciseDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateExerciseDTO
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateExerciseDTO
     */
    'exerciseType'?: CreateExerciseDTOExerciseTypeEnum;
}

export const CreateExerciseDTOExerciseTypeEnum = {
    Journaling: 'JOURNALING',
    Breathing: 'BREATHING',
    Other: 'OTHER'
} as const;

export type CreateExerciseDTOExerciseTypeEnum = typeof CreateExerciseDTOExerciseTypeEnum[keyof typeof CreateExerciseDTOExerciseTypeEnum];

/**
 * 
 * @export
 * @interface CreateGAD7TestDTO
 */
export interface CreateGAD7TestDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateGAD7TestDTO
     */
    'patientId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateGAD7TestDTO
     */
    'meetingId'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateGAD7TestDTO
     */
    'question1'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateGAD7TestDTO
     */
    'question2'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateGAD7TestDTO
     */
    'question3'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateGAD7TestDTO
     */
    'question4'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateGAD7TestDTO
     */
    'question5'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateGAD7TestDTO
     */
    'question6'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateGAD7TestDTO
     */
    'question7'?: number;
}
/**
 * 
 * @export
 * @interface CreateMeetingDTO
 */
export interface CreateMeetingDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateMeetingDTO
     */
    'meetingStart'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMeetingDTO
     */
    'meetingEnd'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMeetingDTO
     */
    'patientId'?: string;
}
/**
 * 
 * @export
 * @interface CreateMeetingNoteDTO
 */
export interface CreateMeetingNoteDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateMeetingNoteDTO
     */
    'meetingId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMeetingNoteDTO
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMeetingNoteDTO
     */
    'content'?: string;
}
/**
 * 
 * @export
 * @interface CreatePatientDTO
 */
export interface CreatePatientDTO {
    /**
     * 
     * @type {string}
     * @memberof CreatePatientDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePatientDTO
     */
    'gender'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreatePatientDTO
     */
    'age'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreatePatientDTO
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePatientDTO
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePatientDTO
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePatientDTO
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface CreateTherapistDTO
 */
export interface CreateTherapistDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateTherapistDTO
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateTherapistDTO
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface ExerciseComponentOutputDTO
 */
export interface ExerciseComponentOutputDTO {
    /**
     * 
     * @type {string}
     * @memberof ExerciseComponentOutputDTO
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseComponentOutputDTO
     */
    'exerciseComponentType'?: ExerciseComponentOutputDTOExerciseComponentTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ExerciseComponentOutputDTO
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseComponentOutputDTO
     */
    'fileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseComponentOutputDTO
     */
    'fileType'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseComponentOutputDTO
     */
    'extractedText'?: string;
    /**
     * 
     * @type {number}
     * @memberof ExerciseComponentOutputDTO
     */
    'orderNumber'?: number;
}

export const ExerciseComponentOutputDTOExerciseComponentTypeEnum = {
    Text: 'TEXT',
    InputField: 'INPUT_FIELD',
    File: 'FILE',
    Image: 'IMAGE',
    YoutubeVideo: 'YOUTUBE_VIDEO'
} as const;

export type ExerciseComponentOutputDTOExerciseComponentTypeEnum = typeof ExerciseComponentOutputDTOExerciseComponentTypeEnum[keyof typeof ExerciseComponentOutputDTOExerciseComponentTypeEnum];

/**
 * 
 * @export
 * @interface ExerciseOutputDTO
 */
export interface ExerciseOutputDTO {
    /**
     * 
     * @type {string}
     * @memberof ExerciseOutputDTO
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseOutputDTO
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseOutputDTO
     */
    'exerciseType'?: ExerciseOutputDTOExerciseTypeEnum;
    /**
     * 
     * @type {Array<ExerciseComponentOutputDTO>}
     * @memberof ExerciseOutputDTO
     */
    'exerciseComponentsOutputDTO'?: Array<ExerciseComponentOutputDTO>;
}

export const ExerciseOutputDTOExerciseTypeEnum = {
    Journaling: 'JOURNALING',
    Breathing: 'BREATHING',
    Other: 'OTHER'
} as const;

export type ExerciseOutputDTOExerciseTypeEnum = typeof ExerciseOutputDTOExerciseTypeEnum[keyof typeof ExerciseOutputDTOExerciseTypeEnum];

/**
 * 
 * @export
 * @interface GAD7TestOutputDTO
 */
export interface GAD7TestOutputDTO {
    /**
     * 
     * @type {string}
     * @memberof GAD7TestOutputDTO
     */
    'testId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GAD7TestOutputDTO
     */
    'patientId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GAD7TestOutputDTO
     */
    'meetingId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GAD7TestOutputDTO
     */
    'creationDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof GAD7TestOutputDTO
     */
    'question1'?: number;
    /**
     * 
     * @type {number}
     * @memberof GAD7TestOutputDTO
     */
    'question2'?: number;
    /**
     * 
     * @type {number}
     * @memberof GAD7TestOutputDTO
     */
    'question3'?: number;
    /**
     * 
     * @type {number}
     * @memberof GAD7TestOutputDTO
     */
    'question4'?: number;
    /**
     * 
     * @type {number}
     * @memberof GAD7TestOutputDTO
     */
    'question5'?: number;
    /**
     * 
     * @type {number}
     * @memberof GAD7TestOutputDTO
     */
    'question6'?: number;
    /**
     * 
     * @type {number}
     * @memberof GAD7TestOutputDTO
     */
    'question7'?: number;
}
/**
 * 
 * @export
 * @interface LoginTherapistDTO
 */
export interface LoginTherapistDTO {
    /**
     * 
     * @type {string}
     * @memberof LoginTherapistDTO
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginTherapistDTO
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface MeetingNoteOutputDTO
 */
export interface MeetingNoteOutputDTO {
    /**
     * 
     * @type {string}
     * @memberof MeetingNoteOutputDTO
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof MeetingNoteOutputDTO
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof MeetingNoteOutputDTO
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof MeetingNoteOutputDTO
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof MeetingNoteOutputDTO
     */
    'content'?: string;
}
/**
 * 
 * @export
 * @interface MeetingOutputDTO
 */
export interface MeetingOutputDTO {
    /**
     * 
     * @type {string}
     * @memberof MeetingOutputDTO
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof MeetingOutputDTO
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof MeetingOutputDTO
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof MeetingOutputDTO
     */
    'meetingStart'?: string;
    /**
     * 
     * @type {string}
     * @memberof MeetingOutputDTO
     */
    'meetingEnd'?: string;
    /**
     * 
     * @type {Array<MeetingNoteOutputDTO>}
     * @memberof MeetingOutputDTO
     */
    'meetingNotesOutputDTO'?: Array<MeetingNoteOutputDTO>;
}
/**
 * 
 * @export
 * @interface PatientDocumentOutputDTO
 */
export interface PatientDocumentOutputDTO {
    /**
     * 
     * @type {string}
     * @memberof PatientDocumentOutputDTO
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientDocumentOutputDTO
     */
    'fileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientDocumentOutputDTO
     */
    'fileType'?: string;
}
/**
 * 
 * @export
 * @interface PatientOutputDTO
 */
export interface PatientOutputDTO {
    /**
     * 
     * @type {string}
     * @memberof PatientOutputDTO
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientOutputDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientOutputDTO
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientOutputDTO
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientOutputDTO
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientOutputDTO
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientOutputDTO
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientOutputDTO
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof PatientOutputDTO
     */
    'age'?: number;
    /**
     * 
     * @type {string}
     * @memberof PatientOutputDTO
     */
    'email'?: string;
    /**
     * 
     * @type {Array<MeetingOutputDTO>}
     * @memberof PatientOutputDTO
     */
    'meetingsOutputDTO'?: Array<MeetingOutputDTO>;
}
/**
 * 
 * @export
 * @interface TherapistOutputDTO
 */
export interface TherapistOutputDTO {
    /**
     * 
     * @type {string}
     * @memberof TherapistOutputDTO
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TherapistOutputDTO
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof TherapistOutputDTO
     */
    'workspaceId'?: string;
    /**
     * 
     * @type {Array<ChatbotTemplateOutputDTO>}
     * @memberof TherapistOutputDTO
     */
    'chatbotTemplatesOutputDTO'?: Array<ChatbotTemplateOutputDTO>;
    /**
     * 
     * @type {Array<PatientOutputDTO>}
     * @memberof TherapistOutputDTO
     */
    'patientsOutputDTO'?: Array<PatientOutputDTO>;
    /**
     * 
     * @type {string}
     * @memberof TherapistOutputDTO
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TherapistOutputDTO
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface UpdateExerciseComponentDTO
 */
export interface UpdateExerciseComponentDTO {
    /**
     * 
     * @type {string}
     * @memberof UpdateExerciseComponentDTO
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateExerciseComponentDTO
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateExerciseComponentDTO
     */
    'orderNumber'?: number;
}
/**
 * 
 * @export
 * @interface UpdateExerciseDTO
 */
export interface UpdateExerciseDTO {
    /**
     * 
     * @type {string}
     * @memberof UpdateExerciseDTO
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateExerciseDTO
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateExerciseDTO
     */
    'exerciseType'?: UpdateExerciseDTOExerciseTypeEnum;
}

export const UpdateExerciseDTOExerciseTypeEnum = {
    Journaling: 'JOURNALING',
    Breathing: 'BREATHING',
    Other: 'OTHER'
} as const;

export type UpdateExerciseDTOExerciseTypeEnum = typeof UpdateExerciseDTOExerciseTypeEnum[keyof typeof UpdateExerciseDTOExerciseTypeEnum];

/**
 * 
 * @export
 * @interface UpdateMeetingNoteDTO
 */
export interface UpdateMeetingNoteDTO {
    /**
     * 
     * @type {string}
     * @memberof UpdateMeetingNoteDTO
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMeetingNoteDTO
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMeetingNoteDTO
     */
    'content'?: string;
}

/**
 * ApplicationApi - axios parameter creator
 * @export
 */
export const ApplicationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        helloWorld: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApplicationApi - functional programming interface
 * @export
 */
export const ApplicationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApplicationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async helloWorld(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.helloWorld(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicationApi.helloWorld']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ApplicationApi - factory interface
 * @export
 */
export const ApplicationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApplicationApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        helloWorld(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.helloWorld(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApplicationApi - interface
 * @export
 * @interface ApplicationApi
 */
export interface ApplicationApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApiInterface
     */
    helloWorld(options?: RawAxiosRequestConfig): AxiosPromise<string>;

}

/**
 * ApplicationApi - object-oriented interface
 * @export
 * @class ApplicationApi
 * @extends {BaseAPI}
 */
export class ApplicationApi extends BaseAPI implements ApplicationApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApi
     */
    public helloWorld(options?: RawAxiosRequestConfig) {
        return ApplicationApiFp(this.configuration).helloWorld(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ChatControllerApi - axios parameter creator
 * @export
 */
export const ChatControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ChatCompletionWithConfigRequestDTO} chatCompletionWithConfigRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatWithConfig: async (chatCompletionWithConfigRequestDTO: ChatCompletionWithConfigRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatCompletionWithConfigRequestDTO' is not null or undefined
            assertParamExists('chatWithConfig', 'chatCompletionWithConfigRequestDTO', chatCompletionWithConfigRequestDTO)
            const localVarPath = `/api/chat/completions-with-config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chatCompletionWithConfigRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChatControllerApi - functional programming interface
 * @export
 */
export const ChatControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChatControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ChatCompletionWithConfigRequestDTO} chatCompletionWithConfigRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatWithConfig(chatCompletionWithConfigRequestDTO: ChatCompletionWithConfigRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatCompletionResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chatWithConfig(chatCompletionWithConfigRequestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatControllerApi.chatWithConfig']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ChatControllerApi - factory interface
 * @export
 */
export const ChatControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChatControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {ChatCompletionWithConfigRequestDTO} chatCompletionWithConfigRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatWithConfig(chatCompletionWithConfigRequestDTO: ChatCompletionWithConfigRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<ChatCompletionResponseDTO> {
            return localVarFp.chatWithConfig(chatCompletionWithConfigRequestDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChatControllerApi - interface
 * @export
 * @interface ChatControllerApi
 */
export interface ChatControllerApiInterface {
    /**
     * 
     * @param {ChatCompletionWithConfigRequestDTO} chatCompletionWithConfigRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatControllerApiInterface
     */
    chatWithConfig(chatCompletionWithConfigRequestDTO: ChatCompletionWithConfigRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<ChatCompletionResponseDTO>;

}

/**
 * ChatControllerApi - object-oriented interface
 * @export
 * @class ChatControllerApi
 * @extends {BaseAPI}
 */
export class ChatControllerApi extends BaseAPI implements ChatControllerApiInterface {
    /**
     * 
     * @param {ChatCompletionWithConfigRequestDTO} chatCompletionWithConfigRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatControllerApi
     */
    public chatWithConfig(chatCompletionWithConfigRequestDTO: ChatCompletionWithConfigRequestDTO, options?: RawAxiosRequestConfig) {
        return ChatControllerApiFp(this.configuration).chatWithConfig(chatCompletionWithConfigRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ChatbotTemplateControllerApi - axios parameter creator
 * @export
 */
export const ChatbotTemplateControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloneTemplate: async (templateId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('cloneTemplate', 'templateId', templateId)
            const localVarPath = `/chatbot-templates/{templateId}/clone`
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateChatbotTemplateDTO} createChatbotTemplateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTemplate: async (createChatbotTemplateDTO: CreateChatbotTemplateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createChatbotTemplateDTO' is not null or undefined
            assertParamExists('createTemplate', 'createChatbotTemplateDTO', createChatbotTemplateDTO)
            const localVarPath = `/chatbot-templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createChatbotTemplateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplate: async (templateId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('deleteTemplate', 'templateId', templateId)
            const localVarPath = `/chatbot-templates/{templateId}`
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} templateId 
         * @param {CreateChatbotTemplateDTO} createChatbotTemplateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplate: async (templateId: string, createChatbotTemplateDTO: CreateChatbotTemplateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('updateTemplate', 'templateId', templateId)
            // verify required parameter 'createChatbotTemplateDTO' is not null or undefined
            assertParamExists('updateTemplate', 'createChatbotTemplateDTO', createChatbotTemplateDTO)
            const localVarPath = `/chatbot-templates/{templateId}`
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createChatbotTemplateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChatbotTemplateControllerApi - functional programming interface
 * @export
 */
export const ChatbotTemplateControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChatbotTemplateControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloneTemplate(templateId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TherapistOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloneTemplate(templateId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatbotTemplateControllerApi.cloneTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateChatbotTemplateDTO} createChatbotTemplateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTemplate(createChatbotTemplateDTO: CreateChatbotTemplateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TherapistOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTemplate(createChatbotTemplateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatbotTemplateControllerApi.createTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTemplate(templateId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TherapistOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTemplate(templateId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatbotTemplateControllerApi.deleteTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} templateId 
         * @param {CreateChatbotTemplateDTO} createChatbotTemplateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTemplate(templateId: string, createChatbotTemplateDTO: CreateChatbotTemplateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TherapistOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTemplate(templateId, createChatbotTemplateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatbotTemplateControllerApi.updateTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ChatbotTemplateControllerApi - factory interface
 * @export
 */
export const ChatbotTemplateControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChatbotTemplateControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloneTemplate(templateId: string, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO> {
            return localVarFp.cloneTemplate(templateId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateChatbotTemplateDTO} createChatbotTemplateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTemplate(createChatbotTemplateDTO: CreateChatbotTemplateDTO, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO> {
            return localVarFp.createTemplate(createChatbotTemplateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplate(templateId: string, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO> {
            return localVarFp.deleteTemplate(templateId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} templateId 
         * @param {CreateChatbotTemplateDTO} createChatbotTemplateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplate(templateId: string, createChatbotTemplateDTO: CreateChatbotTemplateDTO, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO> {
            return localVarFp.updateTemplate(templateId, createChatbotTemplateDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChatbotTemplateControllerApi - interface
 * @export
 * @interface ChatbotTemplateControllerApi
 */
export interface ChatbotTemplateControllerApiInterface {
    /**
     * 
     * @param {string} templateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotTemplateControllerApiInterface
     */
    cloneTemplate(templateId: string, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO>;

    /**
     * 
     * @param {CreateChatbotTemplateDTO} createChatbotTemplateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotTemplateControllerApiInterface
     */
    createTemplate(createChatbotTemplateDTO: CreateChatbotTemplateDTO, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO>;

    /**
     * 
     * @param {string} templateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotTemplateControllerApiInterface
     */
    deleteTemplate(templateId: string, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO>;

    /**
     * 
     * @param {string} templateId 
     * @param {CreateChatbotTemplateDTO} createChatbotTemplateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotTemplateControllerApiInterface
     */
    updateTemplate(templateId: string, createChatbotTemplateDTO: CreateChatbotTemplateDTO, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO>;

}

/**
 * ChatbotTemplateControllerApi - object-oriented interface
 * @export
 * @class ChatbotTemplateControllerApi
 * @extends {BaseAPI}
 */
export class ChatbotTemplateControllerApi extends BaseAPI implements ChatbotTemplateControllerApiInterface {
    /**
     * 
     * @param {string} templateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotTemplateControllerApi
     */
    public cloneTemplate(templateId: string, options?: RawAxiosRequestConfig) {
        return ChatbotTemplateControllerApiFp(this.configuration).cloneTemplate(templateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateChatbotTemplateDTO} createChatbotTemplateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotTemplateControllerApi
     */
    public createTemplate(createChatbotTemplateDTO: CreateChatbotTemplateDTO, options?: RawAxiosRequestConfig) {
        return ChatbotTemplateControllerApiFp(this.configuration).createTemplate(createChatbotTemplateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} templateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotTemplateControllerApi
     */
    public deleteTemplate(templateId: string, options?: RawAxiosRequestConfig) {
        return ChatbotTemplateControllerApiFp(this.configuration).deleteTemplate(templateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} templateId 
     * @param {CreateChatbotTemplateDTO} createChatbotTemplateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotTemplateControllerApi
     */
    public updateTemplate(templateId: string, createChatbotTemplateDTO: CreateChatbotTemplateDTO, options?: RawAxiosRequestConfig) {
        return ChatbotTemplateControllerApiFp(this.configuration).updateTemplate(templateId, createChatbotTemplateDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExerciseComponentControllerApi - axios parameter creator
 * @export
 */
export const ExerciseComponentControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateExerciseComponentDTO} createExerciseComponentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExerciseComponent: async (createExerciseComponentDTO: CreateExerciseComponentDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createExerciseComponentDTO' is not null or undefined
            assertParamExists('createExerciseComponent', 'createExerciseComponentDTO', createExerciseComponentDTO)
            const localVarPath = `/exercise-components/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createExerciseComponentDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateExerciseComponentDTO} metadata 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExerciseComponentWithFile: async (metadata: CreateExerciseComponentDTO, file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'metadata' is not null or undefined
            assertParamExists('createExerciseComponentWithFile', 'metadata', metadata)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('createExerciseComponentWithFile', 'file', file)
            const localVarPath = `/exercise-components/with-file`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (metadata !== undefined) { 
                localVarFormParams.append('metadata', new Blob([JSON.stringify(metadata)], { type: "application/json", }));
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} exerciseComponentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExerciseComponent: async (exerciseComponentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'exerciseComponentId' is not null or undefined
            assertParamExists('deleteExerciseComponent', 'exerciseComponentId', exerciseComponentId)
            const localVarPath = `/exercise-components/{exerciseComponentId}`
                .replace(`{${"exerciseComponentId"}}`, encodeURIComponent(String(exerciseComponentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} exerciseComponentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadExerciseComponentFile: async (exerciseComponentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'exerciseComponentId' is not null or undefined
            assertParamExists('downloadExerciseComponentFile', 'exerciseComponentId', exerciseComponentId)
            const localVarPath = `/exercise-components/{exerciseComponentId}/download`
                .replace(`{${"exerciseComponentId"}}`, encodeURIComponent(String(exerciseComponentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateExerciseComponentDTO} updateExerciseComponentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExerciseComponent: async (updateExerciseComponentDTO: UpdateExerciseComponentDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateExerciseComponentDTO' is not null or undefined
            assertParamExists('updateExerciseComponent', 'updateExerciseComponentDTO', updateExerciseComponentDTO)
            const localVarPath = `/exercise-components/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateExerciseComponentDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExerciseComponentControllerApi - functional programming interface
 * @export
 */
export const ExerciseComponentControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExerciseComponentControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateExerciseComponentDTO} createExerciseComponentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createExerciseComponent(createExerciseComponentDTO: CreateExerciseComponentDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createExerciseComponent(createExerciseComponentDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExerciseComponentControllerApi.createExerciseComponent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateExerciseComponentDTO} metadata 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createExerciseComponentWithFile(metadata: CreateExerciseComponentDTO, file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createExerciseComponentWithFile(metadata, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExerciseComponentControllerApi.createExerciseComponentWithFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} exerciseComponentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExerciseComponent(exerciseComponentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteExerciseComponent(exerciseComponentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExerciseComponentControllerApi.deleteExerciseComponent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} exerciseComponentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadExerciseComponentFile(exerciseComponentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadExerciseComponentFile(exerciseComponentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExerciseComponentControllerApi.downloadExerciseComponentFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateExerciseComponentDTO} updateExerciseComponentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateExerciseComponent(updateExerciseComponentDTO: UpdateExerciseComponentDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateExerciseComponent(updateExerciseComponentDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExerciseComponentControllerApi.updateExerciseComponent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ExerciseComponentControllerApi - factory interface
 * @export
 */
export const ExerciseComponentControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExerciseComponentControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateExerciseComponentDTO} createExerciseComponentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExerciseComponent(createExerciseComponentDTO: CreateExerciseComponentDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createExerciseComponent(createExerciseComponentDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateExerciseComponentDTO} metadata 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExerciseComponentWithFile(metadata: CreateExerciseComponentDTO, file: File, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createExerciseComponentWithFile(metadata, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} exerciseComponentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExerciseComponent(exerciseComponentId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteExerciseComponent(exerciseComponentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} exerciseComponentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadExerciseComponentFile(exerciseComponentId: string, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.downloadExerciseComponentFile(exerciseComponentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateExerciseComponentDTO} updateExerciseComponentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExerciseComponent(updateExerciseComponentDTO: UpdateExerciseComponentDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateExerciseComponent(updateExerciseComponentDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExerciseComponentControllerApi - interface
 * @export
 * @interface ExerciseComponentControllerApi
 */
export interface ExerciseComponentControllerApiInterface {
    /**
     * 
     * @param {CreateExerciseComponentDTO} createExerciseComponentDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseComponentControllerApiInterface
     */
    createExerciseComponent(createExerciseComponentDTO: CreateExerciseComponentDTO, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {CreateExerciseComponentDTO} metadata 
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseComponentControllerApiInterface
     */
    createExerciseComponentWithFile(metadata: CreateExerciseComponentDTO, file: File, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} exerciseComponentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseComponentControllerApiInterface
     */
    deleteExerciseComponent(exerciseComponentId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} exerciseComponentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseComponentControllerApiInterface
     */
    downloadExerciseComponentFile(exerciseComponentId: string, options?: RawAxiosRequestConfig): AxiosPromise<File>;

    /**
     * 
     * @param {UpdateExerciseComponentDTO} updateExerciseComponentDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseComponentControllerApiInterface
     */
    updateExerciseComponent(updateExerciseComponentDTO: UpdateExerciseComponentDTO, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * ExerciseComponentControllerApi - object-oriented interface
 * @export
 * @class ExerciseComponentControllerApi
 * @extends {BaseAPI}
 */
export class ExerciseComponentControllerApi extends BaseAPI implements ExerciseComponentControllerApiInterface {
    /**
     * 
     * @param {CreateExerciseComponentDTO} createExerciseComponentDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseComponentControllerApi
     */
    public createExerciseComponent(createExerciseComponentDTO: CreateExerciseComponentDTO, options?: RawAxiosRequestConfig) {
        return ExerciseComponentControllerApiFp(this.configuration).createExerciseComponent(createExerciseComponentDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateExerciseComponentDTO} metadata 
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseComponentControllerApi
     */
    public createExerciseComponentWithFile(metadata: CreateExerciseComponentDTO, file: File, options?: RawAxiosRequestConfig) {
        return ExerciseComponentControllerApiFp(this.configuration).createExerciseComponentWithFile(metadata, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} exerciseComponentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseComponentControllerApi
     */
    public deleteExerciseComponent(exerciseComponentId: string, options?: RawAxiosRequestConfig) {
        return ExerciseComponentControllerApiFp(this.configuration).deleteExerciseComponent(exerciseComponentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} exerciseComponentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseComponentControllerApi
     */
    public downloadExerciseComponentFile(exerciseComponentId: string, options?: RawAxiosRequestConfig) {
        return ExerciseComponentControllerApiFp(this.configuration).downloadExerciseComponentFile(exerciseComponentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateExerciseComponentDTO} updateExerciseComponentDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseComponentControllerApi
     */
    public updateExerciseComponent(updateExerciseComponentDTO: UpdateExerciseComponentDTO, options?: RawAxiosRequestConfig) {
        return ExerciseComponentControllerApiFp(this.configuration).updateExerciseComponent(updateExerciseComponentDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExerciseControllerApi - axios parameter creator
 * @export
 */
export const ExerciseControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateExerciseDTO} createExerciseDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExercise: async (createExerciseDTO: CreateExerciseDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createExerciseDTO' is not null or undefined
            assertParamExists('createExercise', 'createExerciseDTO', createExerciseDTO)
            const localVarPath = `/exercises/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createExerciseDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} exerciseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExercise: async (exerciseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'exerciseId' is not null or undefined
            assertParamExists('deleteExercise', 'exerciseId', exerciseId)
            const localVarPath = `/exercises/{exerciseId}`
                .replace(`{${"exerciseId"}}`, encodeURIComponent(String(exerciseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllExercisesOfPatient: async (patientId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientId' is not null or undefined
            assertParamExists('getAllExercisesOfPatient', 'patientId', patientId)
            const localVarPath = `/exercises/patient/{patientId}`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} exerciseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExerciseById: async (exerciseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'exerciseId' is not null or undefined
            assertParamExists('getExerciseById', 'exerciseId', exerciseId)
            const localVarPath = `/exercises/{exerciseId}`
                .replace(`{${"exerciseId"}}`, encodeURIComponent(String(exerciseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateExerciseDTO} updateExerciseDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExercise: async (updateExerciseDTO: UpdateExerciseDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateExerciseDTO' is not null or undefined
            assertParamExists('updateExercise', 'updateExerciseDTO', updateExerciseDTO)
            const localVarPath = `/exercises/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateExerciseDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExerciseControllerApi - functional programming interface
 * @export
 */
export const ExerciseControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExerciseControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateExerciseDTO} createExerciseDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createExercise(createExerciseDTO: CreateExerciseDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExerciseOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createExercise(createExerciseDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExerciseControllerApi.createExercise']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} exerciseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExercise(exerciseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteExercise(exerciseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExerciseControllerApi.deleteExercise']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllExercisesOfPatient(patientId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExerciseOutputDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllExercisesOfPatient(patientId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExerciseControllerApi.getAllExercisesOfPatient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} exerciseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExerciseById(exerciseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExerciseOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExerciseById(exerciseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExerciseControllerApi.getExerciseById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateExerciseDTO} updateExerciseDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateExercise(updateExerciseDTO: UpdateExerciseDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExerciseOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateExercise(updateExerciseDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExerciseControllerApi.updateExercise']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ExerciseControllerApi - factory interface
 * @export
 */
export const ExerciseControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExerciseControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateExerciseDTO} createExerciseDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExercise(createExerciseDTO: CreateExerciseDTO, options?: RawAxiosRequestConfig): AxiosPromise<ExerciseOutputDTO> {
            return localVarFp.createExercise(createExerciseDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} exerciseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExercise(exerciseId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteExercise(exerciseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllExercisesOfPatient(patientId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ExerciseOutputDTO>> {
            return localVarFp.getAllExercisesOfPatient(patientId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} exerciseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExerciseById(exerciseId: string, options?: RawAxiosRequestConfig): AxiosPromise<ExerciseOutputDTO> {
            return localVarFp.getExerciseById(exerciseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateExerciseDTO} updateExerciseDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExercise(updateExerciseDTO: UpdateExerciseDTO, options?: RawAxiosRequestConfig): AxiosPromise<ExerciseOutputDTO> {
            return localVarFp.updateExercise(updateExerciseDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExerciseControllerApi - interface
 * @export
 * @interface ExerciseControllerApi
 */
export interface ExerciseControllerApiInterface {
    /**
     * 
     * @param {CreateExerciseDTO} createExerciseDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseControllerApiInterface
     */
    createExercise(createExerciseDTO: CreateExerciseDTO, options?: RawAxiosRequestConfig): AxiosPromise<ExerciseOutputDTO>;

    /**
     * 
     * @param {string} exerciseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseControllerApiInterface
     */
    deleteExercise(exerciseId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} patientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseControllerApiInterface
     */
    getAllExercisesOfPatient(patientId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ExerciseOutputDTO>>;

    /**
     * 
     * @param {string} exerciseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseControllerApiInterface
     */
    getExerciseById(exerciseId: string, options?: RawAxiosRequestConfig): AxiosPromise<ExerciseOutputDTO>;

    /**
     * 
     * @param {UpdateExerciseDTO} updateExerciseDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseControllerApiInterface
     */
    updateExercise(updateExerciseDTO: UpdateExerciseDTO, options?: RawAxiosRequestConfig): AxiosPromise<ExerciseOutputDTO>;

}

/**
 * ExerciseControllerApi - object-oriented interface
 * @export
 * @class ExerciseControllerApi
 * @extends {BaseAPI}
 */
export class ExerciseControllerApi extends BaseAPI implements ExerciseControllerApiInterface {
    /**
     * 
     * @param {CreateExerciseDTO} createExerciseDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseControllerApi
     */
    public createExercise(createExerciseDTO: CreateExerciseDTO, options?: RawAxiosRequestConfig) {
        return ExerciseControllerApiFp(this.configuration).createExercise(createExerciseDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} exerciseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseControllerApi
     */
    public deleteExercise(exerciseId: string, options?: RawAxiosRequestConfig) {
        return ExerciseControllerApiFp(this.configuration).deleteExercise(exerciseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} patientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseControllerApi
     */
    public getAllExercisesOfPatient(patientId: string, options?: RawAxiosRequestConfig) {
        return ExerciseControllerApiFp(this.configuration).getAllExercisesOfPatient(patientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} exerciseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseControllerApi
     */
    public getExerciseById(exerciseId: string, options?: RawAxiosRequestConfig) {
        return ExerciseControllerApiFp(this.configuration).getExerciseById(exerciseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateExerciseDTO} updateExerciseDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseControllerApi
     */
    public updateExercise(updateExerciseDTO: UpdateExerciseDTO, options?: RawAxiosRequestConfig) {
        return ExerciseControllerApiFp(this.configuration).updateExercise(updateExerciseDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MeetingControllerApi - axios parameter creator
 * @export
 */
export const MeetingControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateMeetingDTO} createMeetingDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMeeting: async (createMeetingDTO: CreateMeetingDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createMeetingDTO' is not null or undefined
            assertParamExists('createMeeting', 'createMeetingDTO', createMeetingDTO)
            const localVarPath = `/meetings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMeetingDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} meetingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMeetingById: async (meetingId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('deleteMeetingById', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} meetingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingById: async (meetingId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('getMeetingById', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingsOfPatient: async (patientId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientId' is not null or undefined
            assertParamExists('getMeetingsOfPatient', 'patientId', patientId)
            const localVarPath = `/meetings/patients/{patientId}`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MeetingControllerApi - functional programming interface
 * @export
 */
export const MeetingControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MeetingControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateMeetingDTO} createMeetingDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMeeting(createMeetingDTO: CreateMeetingDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMeeting(createMeetingDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MeetingControllerApi.createMeeting']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} meetingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMeetingById(meetingId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMeetingById(meetingId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MeetingControllerApi.deleteMeetingById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} meetingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeetingById(meetingId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeetingById(meetingId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MeetingControllerApi.getMeetingById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeetingsOfPatient(patientId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MeetingOutputDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeetingsOfPatient(patientId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MeetingControllerApi.getMeetingsOfPatient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MeetingControllerApi - factory interface
 * @export
 */
export const MeetingControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MeetingControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateMeetingDTO} createMeetingDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMeeting(createMeetingDTO: CreateMeetingDTO, options?: RawAxiosRequestConfig): AxiosPromise<MeetingOutputDTO> {
            return localVarFp.createMeeting(createMeetingDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} meetingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMeetingById(meetingId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteMeetingById(meetingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} meetingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingById(meetingId: string, options?: RawAxiosRequestConfig): AxiosPromise<MeetingOutputDTO> {
            return localVarFp.getMeetingById(meetingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingsOfPatient(patientId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<MeetingOutputDTO>> {
            return localVarFp.getMeetingsOfPatient(patientId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MeetingControllerApi - interface
 * @export
 * @interface MeetingControllerApi
 */
export interface MeetingControllerApiInterface {
    /**
     * 
     * @param {CreateMeetingDTO} createMeetingDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingControllerApiInterface
     */
    createMeeting(createMeetingDTO: CreateMeetingDTO, options?: RawAxiosRequestConfig): AxiosPromise<MeetingOutputDTO>;

    /**
     * 
     * @param {string} meetingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingControllerApiInterface
     */
    deleteMeetingById(meetingId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} meetingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingControllerApiInterface
     */
    getMeetingById(meetingId: string, options?: RawAxiosRequestConfig): AxiosPromise<MeetingOutputDTO>;

    /**
     * 
     * @param {string} patientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingControllerApiInterface
     */
    getMeetingsOfPatient(patientId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<MeetingOutputDTO>>;

}

/**
 * MeetingControllerApi - object-oriented interface
 * @export
 * @class MeetingControllerApi
 * @extends {BaseAPI}
 */
export class MeetingControllerApi extends BaseAPI implements MeetingControllerApiInterface {
    /**
     * 
     * @param {CreateMeetingDTO} createMeetingDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingControllerApi
     */
    public createMeeting(createMeetingDTO: CreateMeetingDTO, options?: RawAxiosRequestConfig) {
        return MeetingControllerApiFp(this.configuration).createMeeting(createMeetingDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} meetingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingControllerApi
     */
    public deleteMeetingById(meetingId: string, options?: RawAxiosRequestConfig) {
        return MeetingControllerApiFp(this.configuration).deleteMeetingById(meetingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} meetingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingControllerApi
     */
    public getMeetingById(meetingId: string, options?: RawAxiosRequestConfig) {
        return MeetingControllerApiFp(this.configuration).getMeetingById(meetingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} patientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingControllerApi
     */
    public getMeetingsOfPatient(patientId: string, options?: RawAxiosRequestConfig) {
        return MeetingControllerApiFp(this.configuration).getMeetingsOfPatient(patientId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MeetingNoteControllerApi - axios parameter creator
 * @export
 */
export const MeetingNoteControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateMeetingNoteDTO} createMeetingNoteDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMeetingNote: async (createMeetingNoteDTO: CreateMeetingNoteDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createMeetingNoteDTO' is not null or undefined
            assertParamExists('createMeetingNote', 'createMeetingNoteDTO', createMeetingNoteDTO)
            const localVarPath = `/meeting-notes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMeetingNoteDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} meetingNoteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletemeetingById: async (meetingNoteId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingNoteId' is not null or undefined
            assertParamExists('deletemeetingById', 'meetingNoteId', meetingNoteId)
            const localVarPath = `/meeting-notes/{meetingNoteId}`
                .replace(`{${"meetingNoteId"}}`, encodeURIComponent(String(meetingNoteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} meetingNoteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingNoteById: async (meetingNoteId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingNoteId' is not null or undefined
            assertParamExists('getMeetingNoteById', 'meetingNoteId', meetingNoteId)
            const localVarPath = `/meeting-notes/{meetingNoteId}`
                .replace(`{${"meetingNoteId"}}`, encodeURIComponent(String(meetingNoteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateMeetingNoteDTO} updateMeetingNoteDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMeetingNote: async (updateMeetingNoteDTO: UpdateMeetingNoteDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateMeetingNoteDTO' is not null or undefined
            assertParamExists('updateMeetingNote', 'updateMeetingNoteDTO', updateMeetingNoteDTO)
            const localVarPath = `/meeting-notes/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMeetingNoteDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MeetingNoteControllerApi - functional programming interface
 * @export
 */
export const MeetingNoteControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MeetingNoteControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateMeetingNoteDTO} createMeetingNoteDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMeetingNote(createMeetingNoteDTO: CreateMeetingNoteDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingNoteOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMeetingNote(createMeetingNoteDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MeetingNoteControllerApi.createMeetingNote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} meetingNoteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletemeetingById(meetingNoteId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletemeetingById(meetingNoteId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MeetingNoteControllerApi.deletemeetingById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} meetingNoteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeetingNoteById(meetingNoteId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingNoteOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeetingNoteById(meetingNoteId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MeetingNoteControllerApi.getMeetingNoteById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateMeetingNoteDTO} updateMeetingNoteDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMeetingNote(updateMeetingNoteDTO: UpdateMeetingNoteDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingNoteOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMeetingNote(updateMeetingNoteDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MeetingNoteControllerApi.updateMeetingNote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MeetingNoteControllerApi - factory interface
 * @export
 */
export const MeetingNoteControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MeetingNoteControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateMeetingNoteDTO} createMeetingNoteDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMeetingNote(createMeetingNoteDTO: CreateMeetingNoteDTO, options?: RawAxiosRequestConfig): AxiosPromise<MeetingNoteOutputDTO> {
            return localVarFp.createMeetingNote(createMeetingNoteDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} meetingNoteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletemeetingById(meetingNoteId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletemeetingById(meetingNoteId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} meetingNoteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingNoteById(meetingNoteId: string, options?: RawAxiosRequestConfig): AxiosPromise<MeetingNoteOutputDTO> {
            return localVarFp.getMeetingNoteById(meetingNoteId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateMeetingNoteDTO} updateMeetingNoteDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMeetingNote(updateMeetingNoteDTO: UpdateMeetingNoteDTO, options?: RawAxiosRequestConfig): AxiosPromise<MeetingNoteOutputDTO> {
            return localVarFp.updateMeetingNote(updateMeetingNoteDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MeetingNoteControllerApi - interface
 * @export
 * @interface MeetingNoteControllerApi
 */
export interface MeetingNoteControllerApiInterface {
    /**
     * 
     * @param {CreateMeetingNoteDTO} createMeetingNoteDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingNoteControllerApiInterface
     */
    createMeetingNote(createMeetingNoteDTO: CreateMeetingNoteDTO, options?: RawAxiosRequestConfig): AxiosPromise<MeetingNoteOutputDTO>;

    /**
     * 
     * @param {string} meetingNoteId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingNoteControllerApiInterface
     */
    deletemeetingById(meetingNoteId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} meetingNoteId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingNoteControllerApiInterface
     */
    getMeetingNoteById(meetingNoteId: string, options?: RawAxiosRequestConfig): AxiosPromise<MeetingNoteOutputDTO>;

    /**
     * 
     * @param {UpdateMeetingNoteDTO} updateMeetingNoteDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingNoteControllerApiInterface
     */
    updateMeetingNote(updateMeetingNoteDTO: UpdateMeetingNoteDTO, options?: RawAxiosRequestConfig): AxiosPromise<MeetingNoteOutputDTO>;

}

/**
 * MeetingNoteControllerApi - object-oriented interface
 * @export
 * @class MeetingNoteControllerApi
 * @extends {BaseAPI}
 */
export class MeetingNoteControllerApi extends BaseAPI implements MeetingNoteControllerApiInterface {
    /**
     * 
     * @param {CreateMeetingNoteDTO} createMeetingNoteDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingNoteControllerApi
     */
    public createMeetingNote(createMeetingNoteDTO: CreateMeetingNoteDTO, options?: RawAxiosRequestConfig) {
        return MeetingNoteControllerApiFp(this.configuration).createMeetingNote(createMeetingNoteDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} meetingNoteId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingNoteControllerApi
     */
    public deletemeetingById(meetingNoteId: string, options?: RawAxiosRequestConfig) {
        return MeetingNoteControllerApiFp(this.configuration).deletemeetingById(meetingNoteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} meetingNoteId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingNoteControllerApi
     */
    public getMeetingNoteById(meetingNoteId: string, options?: RawAxiosRequestConfig) {
        return MeetingNoteControllerApiFp(this.configuration).getMeetingNoteById(meetingNoteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateMeetingNoteDTO} updateMeetingNoteDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingNoteControllerApi
     */
    public updateMeetingNote(updateMeetingNoteDTO: UpdateMeetingNoteDTO, options?: RawAxiosRequestConfig) {
        return MeetingNoteControllerApiFp(this.configuration).updateMeetingNote(updateMeetingNoteDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PatientControllerApi - axios parameter creator
 * @export
 */
export const PatientControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreatePatientDTO} createPatientDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPatientForTherapist: async (createPatientDTO: CreatePatientDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPatientDTO' is not null or undefined
            assertParamExists('createPatientForTherapist', 'createPatientDTO', createPatientDTO)
            const localVarPath = `/patients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPatientDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePatient: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePatient', 'id', id)
            const localVarPath = `/patients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPatientsOfTherapist: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/patients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PatientControllerApi - functional programming interface
 * @export
 */
export const PatientControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PatientControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreatePatientDTO} createPatientDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPatientForTherapist(createPatientDTO: CreatePatientDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatientOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPatientForTherapist(createPatientDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientControllerApi.createPatientForTherapist']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePatient(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePatient(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientControllerApi.deletePatient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPatientsOfTherapist(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PatientOutputDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPatientsOfTherapist(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientControllerApi.getPatientsOfTherapist']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PatientControllerApi - factory interface
 * @export
 */
export const PatientControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PatientControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreatePatientDTO} createPatientDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPatientForTherapist(createPatientDTO: CreatePatientDTO, options?: RawAxiosRequestConfig): AxiosPromise<PatientOutputDTO> {
            return localVarFp.createPatientForTherapist(createPatientDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePatient(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePatient(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPatientsOfTherapist(options?: RawAxiosRequestConfig): AxiosPromise<Array<PatientOutputDTO>> {
            return localVarFp.getPatientsOfTherapist(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PatientControllerApi - interface
 * @export
 * @interface PatientControllerApi
 */
export interface PatientControllerApiInterface {
    /**
     * 
     * @param {CreatePatientDTO} createPatientDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientControllerApiInterface
     */
    createPatientForTherapist(createPatientDTO: CreatePatientDTO, options?: RawAxiosRequestConfig): AxiosPromise<PatientOutputDTO>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientControllerApiInterface
     */
    deletePatient(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientControllerApiInterface
     */
    getPatientsOfTherapist(options?: RawAxiosRequestConfig): AxiosPromise<Array<PatientOutputDTO>>;

}

/**
 * PatientControllerApi - object-oriented interface
 * @export
 * @class PatientControllerApi
 * @extends {BaseAPI}
 */
export class PatientControllerApi extends BaseAPI implements PatientControllerApiInterface {
    /**
     * 
     * @param {CreatePatientDTO} createPatientDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientControllerApi
     */
    public createPatientForTherapist(createPatientDTO: CreatePatientDTO, options?: RawAxiosRequestConfig) {
        return PatientControllerApiFp(this.configuration).createPatientForTherapist(createPatientDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientControllerApi
     */
    public deletePatient(id: string, options?: RawAxiosRequestConfig) {
        return PatientControllerApiFp(this.configuration).deletePatient(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientControllerApi
     */
    public getPatientsOfTherapist(options?: RawAxiosRequestConfig) {
        return PatientControllerApiFp(this.configuration).getPatientsOfTherapist(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PatientDocumentControllerApi - axios parameter creator
 * @export
 */
export const PatientDocumentControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} patientId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPatientDocument: async (patientId: string, file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientId' is not null or undefined
            assertParamExists('createPatientDocument', 'patientId', patientId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('createPatientDocument', 'file', file)
            const localVarPath = `/patient-documents/{patientId}`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} patientDocumentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile: async (patientDocumentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientDocumentId' is not null or undefined
            assertParamExists('deleteFile', 'patientDocumentId', patientDocumentId)
            const localVarPath = `/patient-documents/{patientDocumentId}`
                .replace(`{${"patientDocumentId"}}`, encodeURIComponent(String(patientDocumentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} patientDocumentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFile: async (patientDocumentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientDocumentId' is not null or undefined
            assertParamExists('downloadFile', 'patientDocumentId', patientDocumentId)
            const localVarPath = `/patient-documents/{patientDocumentId}/download`
                .replace(`{${"patientDocumentId"}}`, encodeURIComponent(String(patientDocumentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentsOfPatient: async (patientId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientId' is not null or undefined
            assertParamExists('getDocumentsOfPatient', 'patientId', patientId)
            const localVarPath = `/patient-documents/{patientId}`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PatientDocumentControllerApi - functional programming interface
 * @export
 */
export const PatientDocumentControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PatientDocumentControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} patientId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPatientDocument(patientId: string, file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPatientDocument(patientId, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientDocumentControllerApi.createPatientDocument']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} patientDocumentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFile(patientDocumentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFile(patientDocumentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientDocumentControllerApi.deleteFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} patientDocumentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadFile(patientDocumentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadFile(patientDocumentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientDocumentControllerApi.downloadFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocumentsOfPatient(patientId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PatientDocumentOutputDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocumentsOfPatient(patientId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientDocumentControllerApi.getDocumentsOfPatient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PatientDocumentControllerApi - factory interface
 * @export
 */
export const PatientDocumentControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PatientDocumentControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} patientId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPatientDocument(patientId: string, file: File, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createPatientDocument(patientId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} patientDocumentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile(patientDocumentId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteFile(patientDocumentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} patientDocumentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFile(patientDocumentId: string, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.downloadFile(patientDocumentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentsOfPatient(patientId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<PatientDocumentOutputDTO>> {
            return localVarFp.getDocumentsOfPatient(patientId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PatientDocumentControllerApi - interface
 * @export
 * @interface PatientDocumentControllerApi
 */
export interface PatientDocumentControllerApiInterface {
    /**
     * 
     * @param {string} patientId 
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientDocumentControllerApiInterface
     */
    createPatientDocument(patientId: string, file: File, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} patientDocumentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientDocumentControllerApiInterface
     */
    deleteFile(patientDocumentId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} patientDocumentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientDocumentControllerApiInterface
     */
    downloadFile(patientDocumentId: string, options?: RawAxiosRequestConfig): AxiosPromise<File>;

    /**
     * 
     * @param {string} patientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientDocumentControllerApiInterface
     */
    getDocumentsOfPatient(patientId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<PatientDocumentOutputDTO>>;

}

/**
 * PatientDocumentControllerApi - object-oriented interface
 * @export
 * @class PatientDocumentControllerApi
 * @extends {BaseAPI}
 */
export class PatientDocumentControllerApi extends BaseAPI implements PatientDocumentControllerApiInterface {
    /**
     * 
     * @param {string} patientId 
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientDocumentControllerApi
     */
    public createPatientDocument(patientId: string, file: File, options?: RawAxiosRequestConfig) {
        return PatientDocumentControllerApiFp(this.configuration).createPatientDocument(patientId, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} patientDocumentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientDocumentControllerApi
     */
    public deleteFile(patientDocumentId: string, options?: RawAxiosRequestConfig) {
        return PatientDocumentControllerApiFp(this.configuration).deleteFile(patientDocumentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} patientDocumentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientDocumentControllerApi
     */
    public downloadFile(patientDocumentId: string, options?: RawAxiosRequestConfig) {
        return PatientDocumentControllerApiFp(this.configuration).downloadFile(patientDocumentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} patientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientDocumentControllerApi
     */
    public getDocumentsOfPatient(patientId: string, options?: RawAxiosRequestConfig) {
        return PatientDocumentControllerApiFp(this.configuration).getDocumentsOfPatient(patientId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PatientTestControllerApi - axios parameter creator
 * @export
 */
export const PatientTestControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateGAD7TestDTO} createGAD7TestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTest: async (createGAD7TestDTO: CreateGAD7TestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createGAD7TestDTO' is not null or undefined
            assertParamExists('createTest', 'createGAD7TestDTO', createGAD7TestDTO)
            const localVarPath = `/tests/gad7`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGAD7TestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestById: async (testId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testId' is not null or undefined
            assertParamExists('getTestById', 'testId', testId)
            const localVarPath = `/tests/gad7/{testId}`
                .replace(`{${"testId"}}`, encodeURIComponent(String(testId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} meetingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestsByMeeting: async (meetingId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('getTestsByMeeting', 'meetingId', meetingId)
            const localVarPath = `/tests/gad7/meeting/{meetingId}`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestsForPatient: async (patientId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientId' is not null or undefined
            assertParamExists('getTestsForPatient', 'patientId', patientId)
            const localVarPath = `/tests/gad7/patient/{patientId}`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PatientTestControllerApi - functional programming interface
 * @export
 */
export const PatientTestControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PatientTestControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateGAD7TestDTO} createGAD7TestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTest(createGAD7TestDTO: CreateGAD7TestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GAD7TestOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTest(createGAD7TestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientTestControllerApi.createTest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTestById(testId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GAD7TestOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTestById(testId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientTestControllerApi.getTestById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} meetingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTestsByMeeting(meetingId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GAD7TestOutputDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTestsByMeeting(meetingId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientTestControllerApi.getTestsByMeeting']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTestsForPatient(patientId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GAD7TestOutputDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTestsForPatient(patientId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientTestControllerApi.getTestsForPatient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PatientTestControllerApi - factory interface
 * @export
 */
export const PatientTestControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PatientTestControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateGAD7TestDTO} createGAD7TestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTest(createGAD7TestDTO: CreateGAD7TestDTO, options?: RawAxiosRequestConfig): AxiosPromise<GAD7TestOutputDTO> {
            return localVarFp.createTest(createGAD7TestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestById(testId: string, options?: RawAxiosRequestConfig): AxiosPromise<GAD7TestOutputDTO> {
            return localVarFp.getTestById(testId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} meetingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestsByMeeting(meetingId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GAD7TestOutputDTO>> {
            return localVarFp.getTestsByMeeting(meetingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestsForPatient(patientId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GAD7TestOutputDTO>> {
            return localVarFp.getTestsForPatient(patientId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PatientTestControllerApi - interface
 * @export
 * @interface PatientTestControllerApi
 */
export interface PatientTestControllerApiInterface {
    /**
     * 
     * @param {CreateGAD7TestDTO} createGAD7TestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientTestControllerApiInterface
     */
    createTest(createGAD7TestDTO: CreateGAD7TestDTO, options?: RawAxiosRequestConfig): AxiosPromise<GAD7TestOutputDTO>;

    /**
     * 
     * @param {string} testId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientTestControllerApiInterface
     */
    getTestById(testId: string, options?: RawAxiosRequestConfig): AxiosPromise<GAD7TestOutputDTO>;

    /**
     * 
     * @param {string} meetingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientTestControllerApiInterface
     */
    getTestsByMeeting(meetingId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GAD7TestOutputDTO>>;

    /**
     * 
     * @param {string} patientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientTestControllerApiInterface
     */
    getTestsForPatient(patientId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GAD7TestOutputDTO>>;

}

/**
 * PatientTestControllerApi - object-oriented interface
 * @export
 * @class PatientTestControllerApi
 * @extends {BaseAPI}
 */
export class PatientTestControllerApi extends BaseAPI implements PatientTestControllerApiInterface {
    /**
     * 
     * @param {CreateGAD7TestDTO} createGAD7TestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientTestControllerApi
     */
    public createTest(createGAD7TestDTO: CreateGAD7TestDTO, options?: RawAxiosRequestConfig) {
        return PatientTestControllerApiFp(this.configuration).createTest(createGAD7TestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} testId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientTestControllerApi
     */
    public getTestById(testId: string, options?: RawAxiosRequestConfig) {
        return PatientTestControllerApiFp(this.configuration).getTestById(testId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} meetingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientTestControllerApi
     */
    public getTestsByMeeting(meetingId: string, options?: RawAxiosRequestConfig) {
        return PatientTestControllerApiFp(this.configuration).getTestsByMeeting(meetingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} patientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientTestControllerApi
     */
    public getTestsForPatient(patientId: string, options?: RawAxiosRequestConfig) {
        return PatientTestControllerApiFp(this.configuration).getTestsForPatient(patientId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TherapistControllerApi - axios parameter creator
 * @export
 */
export const TherapistControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateTherapistDTO} createTherapistDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTherapist: async (createTherapistDTO: CreateTherapistDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTherapistDTO' is not null or undefined
            assertParamExists('createTherapist', 'createTherapistDTO', createTherapistDTO)
            const localVarPath = `/therapists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTherapistDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentlyLoggedInTherapist: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/therapists/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginTherapistDTO} loginTherapistDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginTherapist: async (loginTherapistDTO: LoginTherapistDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginTherapistDTO' is not null or undefined
            assertParamExists('loginTherapist', 'loginTherapistDTO', loginTherapistDTO)
            const localVarPath = `/therapists/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginTherapistDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutTherapist: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/therapists/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TherapistControllerApi - functional programming interface
 * @export
 */
export const TherapistControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TherapistControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateTherapistDTO} createTherapistDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTherapist(createTherapistDTO: CreateTherapistDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TherapistOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTherapist(createTherapistDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TherapistControllerApi.createTherapist']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentlyLoggedInTherapist(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TherapistOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentlyLoggedInTherapist(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TherapistControllerApi.getCurrentlyLoggedInTherapist']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LoginTherapistDTO} loginTherapistDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginTherapist(loginTherapistDTO: LoginTherapistDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TherapistOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginTherapist(loginTherapistDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TherapistControllerApi.loginTherapist']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logoutTherapist(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logoutTherapist(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TherapistControllerApi.logoutTherapist']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TherapistControllerApi - factory interface
 * @export
 */
export const TherapistControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TherapistControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateTherapistDTO} createTherapistDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTherapist(createTherapistDTO: CreateTherapistDTO, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO> {
            return localVarFp.createTherapist(createTherapistDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentlyLoggedInTherapist(options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO> {
            return localVarFp.getCurrentlyLoggedInTherapist(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginTherapistDTO} loginTherapistDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginTherapist(loginTherapistDTO: LoginTherapistDTO, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO> {
            return localVarFp.loginTherapist(loginTherapistDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutTherapist(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.logoutTherapist(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TherapistControllerApi - interface
 * @export
 * @interface TherapistControllerApi
 */
export interface TherapistControllerApiInterface {
    /**
     * 
     * @param {CreateTherapistDTO} createTherapistDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapistControllerApiInterface
     */
    createTherapist(createTherapistDTO: CreateTherapistDTO, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapistControllerApiInterface
     */
    getCurrentlyLoggedInTherapist(options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO>;

    /**
     * 
     * @param {LoginTherapistDTO} loginTherapistDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapistControllerApiInterface
     */
    loginTherapist(loginTherapistDTO: LoginTherapistDTO, options?: RawAxiosRequestConfig): AxiosPromise<TherapistOutputDTO>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapistControllerApiInterface
     */
    logoutTherapist(options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * TherapistControllerApi - object-oriented interface
 * @export
 * @class TherapistControllerApi
 * @extends {BaseAPI}
 */
export class TherapistControllerApi extends BaseAPI implements TherapistControllerApiInterface {
    /**
     * 
     * @param {CreateTherapistDTO} createTherapistDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapistControllerApi
     */
    public createTherapist(createTherapistDTO: CreateTherapistDTO, options?: RawAxiosRequestConfig) {
        return TherapistControllerApiFp(this.configuration).createTherapist(createTherapistDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapistControllerApi
     */
    public getCurrentlyLoggedInTherapist(options?: RawAxiosRequestConfig) {
        return TherapistControllerApiFp(this.configuration).getCurrentlyLoggedInTherapist(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginTherapistDTO} loginTherapistDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapistControllerApi
     */
    public loginTherapist(loginTherapistDTO: LoginTherapistDTO, options?: RawAxiosRequestConfig) {
        return TherapistControllerApiFp(this.configuration).loginTherapist(loginTherapistDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TherapistControllerApi
     */
    public logoutTherapist(options?: RawAxiosRequestConfig) {
        return TherapistControllerApiFp(this.configuration).logoutTherapist(options).then((request) => request(this.axios, this.basePath));
    }
}



