package ch.uzh.ifi.imrg.platform.entity;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;

import ch.uzh.ifi.imrg.platform.LLM.LLMContextBuilder;
import ch.uzh.ifi.imrg.platform.rest.dto.output.ChatbotTemplateDocumentOutputDTO;
import ch.uzh.ifi.imrg.platform.rest.mapper.ChatbotTemplateDocumentMapper;
import java.time.Instant;
import java.util.UUID;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
class ChatbotTemplateDocumentTest {

    @Test
    void id_isAutoGeneratedAndOtherSimpleGettersWork() {
        ChatbotTemplateDocument doc = new ChatbotTemplateDocument();
        assertThat(doc.getId()).isNotBlank();

        byte[] bytes = {1, 2, 3};
        doc.setFileData(bytes);
        doc.setExtractedText("txt");
        assertThat(doc.getFileData()).isSameAs(bytes);
        assertThat(doc.getExtractedText()).isEqualTo("txt");
    }

    @Test
    void timestamp_settersAndGetters_coverAllFields() {
        ChatbotTemplateDocument doc = new ChatbotTemplateDocument();

        Instant created = Instant.now();
        Instant updated = created.plusSeconds(60);

        doc.setCreatedAt(created);
        doc.setUpdatedAt(updated);

        assertThat(doc.getCreatedAt()).isEqualTo(created);
        assertThat(doc.getUpdatedAt()).isEqualTo(updated);
    }

    @Test
    void getOwningTherapistId_returnsNestedTherapistId() {
        Therapist therapist = new Therapist();
        therapist.setId("ther-123");

        ChatbotTemplate tpl = new ChatbotTemplate();
        tpl.setTherapist(therapist);

        ChatbotTemplateDocument doc = new ChatbotTemplateDocument();
        doc.setChatbotTemplate(tpl);

        assertThat(doc.getOwningTherapistId()).isEqualTo("ther-123");
    }

    @Test
    void toLLMContext_invokesStaticHelper() {
        ChatbotTemplateDocument doc = new ChatbotTemplateDocument();

        try (MockedStatic<LLMContextBuilder> ms = mockStatic(LLMContextBuilder.class)) {
            ms.when(() -> LLMContextBuilder.getOwnProperties(doc, 5))
                    .thenReturn(new StringBuilder("ctx"));

            assertThat(doc.toLLMContext(5)).isEqualTo("ctx");
            ms.verify(() -> LLMContextBuilder.getOwnProperties(doc, 5));
        }
    }

    @Test
    void mapper_copiesFields() {
        ChatbotTemplateDocument src = new ChatbotTemplateDocument();
        src.setId(UUID.randomUUID().toString());
        src.setFileName("doc.pdf");
        src.setFileType("application/pdf");

        ChatbotTemplateDocumentOutputDTO dto =
                ChatbotTemplateDocumentMapper.INSTANCE
                        .convertEntityToChatbotTemplateDocumentOutputDTO(src);

        assertThat(dto.getId()).isEqualTo(src.getId());
        assertThat(dto.getFileName()).isEqualTo("doc.pdf");
        assertThat(dto.getFileType()).isEqualTo("application/pdf");
    }

    @Test
    void mapper_withNullInput_returnsNull() {
        assertThat(
                ChatbotTemplateDocumentMapper.INSTANCE
                        .convertEntityToChatbotTemplateDocumentOutputDTO(null))
                .isNull();
    }
}
