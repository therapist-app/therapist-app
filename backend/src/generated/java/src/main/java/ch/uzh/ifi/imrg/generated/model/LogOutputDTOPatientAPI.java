/*
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.uzh.ifi.imrg.generated.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.Instant;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * LogOutputDTOPatientAPI
 */
@JsonPropertyOrder({
  LogOutputDTOPatientAPI.JSON_PROPERTY_ID,
  LogOutputDTOPatientAPI.JSON_PROPERTY_PATIENT_ID,
  LogOutputDTOPatientAPI.JSON_PROPERTY_LOG_TYPE,
  LogOutputDTOPatientAPI.JSON_PROPERTY_TIMESTAMP,
  LogOutputDTOPatientAPI.JSON_PROPERTY_UNIQUE_IDENTIFIER,
  LogOutputDTOPatientAPI.JSON_PROPERTY_COMMENT
})
@JsonTypeName("LogOutputDTO")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class LogOutputDTOPatientAPI {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_PATIENT_ID = "patientId";
  private String patientId;

  /**
   * Gets or Sets logType
   */
  public enum LogTypeEnum {
    JOURNAL_CREATION("JOURNAL_CREATION"),
    
    JOURNAL_UPDATE("JOURNAL_UPDATE"),
    
    EXERCISE_START("EXERCISE_START"),
    
    EXERCISE_COMPLETION("EXERCISE_COMPLETION"),
    
    EXERCISE_UPDATE("EXERCISE_UPDATE"),
    
    GENERAL_CONVERSATION_CREATION("GENERAL_CONVERSATION_CREATION"),
    
    GENERAL_CONVERSATION_NAME_UPDATE("GENERAL_CONVERSATION_NAME_UPDATE"),
    
    GENERAL_CONVERSATION_MESSAGE_CREATION("GENERAL_CONVERSATION_MESSAGE_CREATION"),
    
    DOCUMENT_CONVERSATION_MESSAGE_CREATION("DOCUMENT_CONVERSATION_MESSAGE_CREATION"),
    
    EXERCISE_CONVERSATION_MESSAGE_CREATION("EXERCISE_CONVERSATION_MESSAGE_CREATION"),
    
    JOURNAL_CONVERSATION_MESSAGE_CREATION("JOURNAL_CONVERSATION_MESSAGE_CREATION"),
    
    CHATBOT_ICON_UPDATE("CHATBOT_ICON_UPDATE"),
    
    HARMFUL_CONTENT_DETECTED("HARMFUL_CONTENT_DETECTED"),
    
    DOCUMENT_READ("DOCUMENT_READ"),
    
    PSYCHOLOGICAL_TEST_COMPLETED("PSYCHOLOGICAL_TEST_COMPLETED");

    private String value;

    LogTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static LogTypeEnum fromValue(String value) {
      for (LogTypeEnum b : LogTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_LOG_TYPE = "logType";
  private LogTypeEnum logType;

  public static final String JSON_PROPERTY_TIMESTAMP = "timestamp";
  private Instant timestamp;

  public static final String JSON_PROPERTY_UNIQUE_IDENTIFIER = "uniqueIdentifier";
  private String uniqueIdentifier;

  public static final String JSON_PROPERTY_COMMENT = "comment";
  private String comment;

  public LogOutputDTOPatientAPI() {
  }

  public LogOutputDTOPatientAPI id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public LogOutputDTOPatientAPI patientId(String patientId) {
    
    this.patientId = patientId;
    return this;
  }

   /**
   * Get patientId
   * @return patientId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PATIENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPatientId() {
    return patientId;
  }


  @JsonProperty(JSON_PROPERTY_PATIENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPatientId(String patientId) {
    this.patientId = patientId;
  }


  public LogOutputDTOPatientAPI logType(LogTypeEnum logType) {
    
    this.logType = logType;
    return this;
  }

   /**
   * Get logType
   * @return logType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOG_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LogTypeEnum getLogType() {
    return logType;
  }


  @JsonProperty(JSON_PROPERTY_LOG_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLogType(LogTypeEnum logType) {
    this.logType = logType;
  }


  public LogOutputDTOPatientAPI timestamp(Instant timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Instant getTimestamp() {
    return timestamp;
  }


  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimestamp(Instant timestamp) {
    this.timestamp = timestamp;
  }


  public LogOutputDTOPatientAPI uniqueIdentifier(String uniqueIdentifier) {
    
    this.uniqueIdentifier = uniqueIdentifier;
    return this;
  }

   /**
   * Get uniqueIdentifier
   * @return uniqueIdentifier
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UNIQUE_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUniqueIdentifier() {
    return uniqueIdentifier;
  }


  @JsonProperty(JSON_PROPERTY_UNIQUE_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUniqueIdentifier(String uniqueIdentifier) {
    this.uniqueIdentifier = uniqueIdentifier;
  }


  public LogOutputDTOPatientAPI comment(String comment) {
    
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getComment() {
    return comment;
  }


  @JsonProperty(JSON_PROPERTY_COMMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setComment(String comment) {
    this.comment = comment;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogOutputDTOPatientAPI logOutputDTO = (LogOutputDTOPatientAPI) o;
    return Objects.equals(this.id, logOutputDTO.id) &&
        Objects.equals(this.patientId, logOutputDTO.patientId) &&
        Objects.equals(this.logType, logOutputDTO.logType) &&
        Objects.equals(this.timestamp, logOutputDTO.timestamp) &&
        Objects.equals(this.uniqueIdentifier, logOutputDTO.uniqueIdentifier) &&
        Objects.equals(this.comment, logOutputDTO.comment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, patientId, logType, timestamp, uniqueIdentifier, comment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogOutputDTOPatientAPI {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    patientId: ").append(toIndentedString(patientId)).append("\n");
    sb.append("    logType: ").append(toIndentedString(logType)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    uniqueIdentifier: ").append(toIndentedString(uniqueIdentifier)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

