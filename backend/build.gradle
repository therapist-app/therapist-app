plugins {
	id 'java'
	id 'idea'
	id 'org.springframework.boot' version '3.3.0-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.1.4'
	id "org.sonarqube" version "4.4.1.3373"
	id 'jacoco'
	id 'com.github.johnrengelman.processes' version '0.5.0'
	id 'com.diffplug.spotless' version '6.22.0'
}

group = 'ch.uzh.ifi.imrg'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion.set(JavaLanguageVersion.of(21))
	}
}

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

springBoot {
	mainClass.set('ch.uzh.ifi.imrg.platform.Application')
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation 'org.mapstruct:mapstruct:1.3.1.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'
	testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
	implementation group: 'org.json', name: 'json', version: '20240303'

	implementation 'org.postgresql:postgresql:42.6.0'

	 implementation 'io.jsonwebtoken:jjwt:0.12.6'

	
}

bootJar {
	archiveBaseName.set("app")
	archiveVersion.set("")
	archiveFileName.set("app.jar")
}

sonar {
	properties {
		property "sonar.projectKey", "no-code-platform-chatbot_no-code-platform-chatbot-server"
		property "sonar.organization", "no-code-platform-chatbot"
		property "sonar.host.url", "https://sonarcloud.io"
	}
}

test {
	useJUnitPlatform()
	testLogging.showStandardStreams = true
	maxParallelForks = 1
}

File secretPropsFile = file('./local.properties')
if (secretPropsFile.exists()) {
	Properties p = new Properties()
	p.load(new FileInputStream(secretPropsFile))
	p.each { name, value ->
		ext[name] = value
	}
}
defaultTasks 'bootJar', 'build'

spotless {
    java {
        target 'src/**/*.java'
        googleJavaFormat()
    }
}