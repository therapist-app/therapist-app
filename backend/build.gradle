plugins {
	id 'java'
	id 'idea'
	id 'org.springframework.boot' version '3.3.0-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.1.4'
	id "org.sonarqube" version "6.0.1.5171"
	id 'jacoco'
	id 'com.github.johnrengelman.processes' version '0.5.0'
	id 'com.diffplug.spotless' version '6.22.0'
	id 'org.openapi.generator' version '7.4.0'
}

group = 'ch.uzh.ifi.imrg'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion.set(JavaLanguageVersion.of(21))
	}
}

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

springBoot {
	mainClass.set('ch.uzh.ifi.imrg.platform.Application')
}

dependencies {
	compileOnly 'org.projectlombok:lombok:1.18.30'
	annotationProcessor 'org.projectlombok:lombok:1.18.30'

	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
	testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.2'

	implementation 'org.postgresql:postgresql:42.6.0'
	implementation 'org.json:json:20240303'
	implementation 'io.jsonwebtoken:jjwt:0.12.6'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4'
	implementation 'org.apache.tika:tika-core:2.9.1'
	implementation 'org.apache.tika:tika-parsers-standard-package:2.9.1'
	implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
	implementation 'javax.annotation:javax.annotation-api:1.3.2'
	implementation 'com.google.code.findbugs:jsr305:3.0.2'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.17.1'
}

bootJar {
	archiveBaseName.set("app")
	archiveVersion.set("")
	archiveFileName.set("app.jar")
}

sonar {
	properties {
		property "sonar.projectKey", "therapist-app_backend"
		property "sonar.organization", "therapist-app"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.coverage.exclusions", "=**/*"
	}
}

test {
	useJUnitPlatform()
	testLogging.showStandardStreams = true
	maxParallelForks = 1
}

defaultTasks 'bootJar', 'build'

spotless {
	java {
		target 'src/main/**/*.java'
		googleJavaFormat()
	}
}

sourceSets {
	main {
		java {
			srcDir "$projectDir/src/generated/java/src/main/java"
		}
	}
}

def openApiSpecUrl = 'https://backend-patient-app-main.jonas-blum.ch/v3/api-docs'

tasks.named('openApiGenerate') {
    onlyIf {
        if (project.hasProperty('skipOpenApiGenerate') && project.property('skipOpenApiGenerate') == 'true') {
            logger.lifecycle("⏭️ Skipping openApiGenerate because -PskipOpenApiGenerate was set")
            return false
        }

        try {
            def connection = new URL(openApiSpecUrl).openConnection() as HttpURLConnection
            connection.setRequestMethod("HEAD")
            connection.setConnectTimeout(2000)
            connection.setReadTimeout(2000)
            connection.connect()
            def reachable = connection.getResponseCode() == 200
            if (!reachable) logger.warn("⚠️ openApiGenerate skipped: URL returned status ${connection.getResponseCode()}")
            return reachable
        } catch (Exception e) {
            logger.warn("⚠️ openApiGenerate skipped: Could not connect to OpenAPI URL - ${e.message}")
            return false
        }
    }

    generatorName = 'java'
    remoteInputSpec = openApiSpecUrl
    outputDir = "$projectDir/src/generated/java"
    apiPackage = 'ch.uzh.ifi.imrg.generated.api'
    modelPackage = 'ch.uzh.ifi.imrg.generated.model'
    invokerPackage = 'ch.uzh.ifi.imrg.generated.invoker'
    modelNameSuffix = "PatientAPI"
    apiNameSuffix = "PatientAPI"
    typeMappings = ["time": "LocalTime"]
    importMappings = ["LocalTime": "java.time.LocalTime"]
    configOptions = [
        library: 'webclient',
        dateLibrary: 'java8',
        useTags: 'true',
        hideGenerationTimestamp: 'true',
    ]
	skipValidateSpec.set(true)
}

tasks.named('compileJava') {
    dependsOn tasks.named('openApiGenerate')
}
